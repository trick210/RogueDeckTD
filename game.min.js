class CombatMap{static CREATE(t,e){return new this(t,e)}constructor(t,e){this.bg=new Sprite(PIXI.Texture.WHITE),this.bg.width=width,this.bg.height=height-275,this.bg.tint=e.bgColor,this.pathColor=e.pathColor,this.path=new PIXI.Graphics;var h=new PathGenerator(t),t=4294967295*mulberry32(t)();this.waveRand=mulberry32(t),e.width=this.bg.width,e.height=this.bg.height,this.generatedPath=h.createMap(e),this.setupMap(),this.startPos=this.generatedPath.path[0],this.container=new PIXI.Container,this.container.addChild(this.bg),this.container.addChild(this.path),this.initialSpawns=[],this.maxRounds=3}getWave(e,t){let h=[Walker,Snail,Swarmer];var a=(h=null!=t?t:h)[Math.floor(h.length*this.waveRand())];let i=2e3;var s=a.UNIT_COUNT;switch(e){case 1:break;case 2:i=3e3;break;case 3:i=4200;break;case 4:i=5460;break;case 5:i=6552;break;default:i=6552;for(let t=0;t<e-5;t++)i+=Math.floor(.1*i)}var n=[];let r=0;for(let t=0;t<s;t++){var o=a.SPAWN(this.startPos.x,this.startPos.y,Math.floor(i/s),r,this.waveRand);r+=1e4/(s-1),n.push(...o)}return n}setupMap(){this.polygon=this.generatedPath.outlineBot.concat(this.generatedPath.outlineTop.reverse()),this.path.clear(),this.path.lineStyle(3,0),this.path.beginFill(this.pathColor),this.path.moveTo(this.polygon[this.polygon.length-1].x,this.polygon[this.polygon.length-1].y);for(let t=0;t<this.polygon.length;t++)this.path.lineTo(this.polygon[t].x,this.polygon[t].y);this.path.endFill(),this.pathHitbox=new PIXI.Polygon(this.polygon);let t,e;e=null!=this.generatedPath.beziers?(t=this.generatedPath.beziers[this.generatedPath.beziers.length-1].get(.99),this.generatedPath.beziers[this.generatedPath.beziers.length-1].derivative(.99)):(t=this.generatedPath.path[this.generatedPath.path.length-1],{x:this.generatedPath.path[this.generatedPath.path.length-1].x-this.generatedPath.path[this.generatedPath.path.length-2].x,y:this.generatedPath.path[this.generatedPath.path.length-1].y-this.generatedPath.path[this.generatedPath.path.length-2].y});var h=Math.sqrt(e.x*e.x+e.y*e.y),h=(e.x/=h,e.y/=h,Math.PI/2-Math.atan2(e.x,e.y));this.ship=new SpaceShip(t.x+24*e.x,t.y+24*e.y,h)}collide(e){if(e.circular){var h=e.getGlobalPosition();if(this.pathHitbox.contains(h.x,h.y))return!0;for(let t=0;t<this.polygon.length-1;t++)if(distToSegment(h,this.polygon[t],this.polygon[t+1])<e.radius)return!0;if(new PIXI.Polygon(this.ship.bounds).contains(h.x,h.y))return!0;for(let t=0;t<this.ship.bounds.length-1;t++)if(distToSegment(h,this.ship.bounds[t],this.ship.bounds[t+1])<e.radius)return!0}return!1}getPosition(t){let e=t;if(null!=this.generatedPath.beziers)for(let t=0;t<this.generatedPath.beziers.length;t++){var h,a,i=this.generatedPath.beziers[t].length();if(e<i)return a=e/i,h=this.generatedPath.beziers[t].get(a),a=this.generatedPath.beziers[t].normal(a),h.rot=Math.PI/2-Math.atan2(a.x,a.y),h;e-=i}else for(let t=1;t<this.generatedPath.path.length;t++){var s,n,r,o=this.generatedPath.path[t].segLength;if(e<o)return s=e/o,s={x:this.generatedPath.path[t-1].x+s*(this.generatedPath.path[t].x-this.generatedPath.path[t-1].x),y:this.generatedPath.path[t-1].y+s*(this.generatedPath.path[t].y-this.generatedPath.path[t-1].y)},n={x:this.generatedPath.path[t].x-this.generatedPath.path[t-1].x,y:this.generatedPath.path[t].y-this.generatedPath.path[t-1].y},r=Math.sqrt(n.x*n.x+n.y*n.y),n.x/=r,n.y/=r,s.rot=Math.PI-Math.atan2(n.x,n.y),s;e-=o}}drawShipBounds(){var e=new PIXI.Graphics;e.lineStyle(3,0),e.moveTo(this.ship.bounds[this.ship.bounds.length-1].x,this.ship.bounds[this.ship.bounds.length-1].y);for(let t=0;t<this.ship.bounds.length;t++)e.lineTo(this.ship.bounds[t].x,this.ship.bounds[t].y);this.container.addChild(e)}}
class CentipedeBossMap extends CombatMap{constructor(e,t){super(e,t);e=this.getPosition(200);this.head=new CentipedeBossHead(e.x,e.y),this.head.distTraveled=200,this.head.rotate(e.rot),this.initialSpawns.push(this.head),this.maxRounds=Number.MAX_SAFE_INTEGER}getWave(e){var t,e=super.getWave(e,[CentipedeBossPart]);for(t of e)t.head=this.head;return e}}
let grassConfig={start:["LEFT","TOP","RIGHT","BOT"],length:{min:4e3,max:4200},segmentLength:{min:150,max:250},angles:[{min:-80,max:80}],edgeDistance:100,pathDistance:150,pathWidth:64,overlap:!1,splines:!0,bgColor:"0x00AA00",pathColor:"0xC2B280"},crystalConfig={start:["LEFT","TOP","RIGHT","BOT"],length:{min:4200,max:4300},segmentLength:{min:100,max:300},angles:[{min:-90,max:-90},{min:90,max:90},{min:-45,max:-45},{min:45,max:45}],edgeDistance:100,pathDistance:150,pathWidth:64,overlap:!1,splines:!1,bgColor:"0x7b7a8e",pathColor:"0x64336D"};bossConfig={start:["LEFT","TOP","RIGHT","BOT"],length:{min:5e3,max:5200},segmentLength:{min:200,max:300},angles:[{min:-90,max:-90},{min:0,max:0},{min:90,max:90}],edgeDistance:100,pathDistance:200,pathWidth:96,overlap:!(gasConfig={start:["LEFT","TOP","RIGHT","BOT"],length:{min:4e3,max:4200},segmentLength:{min:150,max:200},angles:[{min:-60,max:-40},{min:40,max:60}],edgeDistance:100,pathDistance:150,pathWidth:64,overlap:!1,splines:!0,bgColor:"0xc07d66",pathColor:"0xe0ac9a"}),splines:!0,bgColor:"0x77251c",pathColor:"0x2f0804"};
class PathGenerator{constructor(t){this.rand=mulberry32(t)}createMap(s){let e=!1,i=0,o=0;for(;!e&&i<1e5;){this.mapPositions=[],o=0,e=!0;let t=this.getStartPosition(s);for(this.mapPositions.push(t),i++;o<s.length.min;){var n=this.map(this.rand(),0,1,s.segmentLength.min,s.segmentLength.max),h=this.getValidAngles(s,n,t,o);if(0==h.length){e=!1;break}h=h[Math.floor(this.rand()*h.length)]*(Math.PI/180),h=this.rotate(t.vec,h),h={x:t.x+h.x*n,y:t.y+h.y*n,vec:h,segLength:n};this.mapPositions.push(h),t=h,o+=n}}if(!e)return alert("Path creation failed after 100000 iterations"),[];this.createOutline(s.pathWidth/2);var t={path:this.mapPositions,outlineTop:this.outlineTop,outlineBot:this.outlineBot};if(s.splines){var a=this.getCurveControlPoints(this.mapPositions),r=(this.getCurveControlPoints(this.outlineTop),this.getCurveControlPoints(this.outlineBot),[]);for(let t=0;t<this.mapPositions.length-1;t++)r.push(new Bezier(this.mapPositions[t],a.firstControlPoints[t],a.secondControlPoints[t],this.mapPositions[t+1]));t.beziers=r;var l=[],g=[];for(let e=0;e<r.length;e++){var x=100,c=r[e].getLUT(x);for(let t=1;t<99;t++)l.push({x:c[t].x+r[e].normal(t/x).x*s.pathWidth/2,y:c[t].y+r[e].normal(t/x).y*s.pathWidth/2}),g.push({x:c[t].x-r[e].normal(t/x).x*s.pathWidth/2,y:c[t].y-r[e].normal(t/x).y*s.pathWidth/2})}t.outlineTop=l,t.outlineBot=g}return console.log(i),t}checkCollision(e,s){for(let t=1;t<this.mapPositions.length-1;t++){var i=this.mapPositions[t-1],o=this.mapPositions[t],n=(s.x-e.x)*(o.y-i.y)-(o.x-i.x)*(s.y-e.y);if(0!=n){i=((o.y-i.y)*(o.x-e.x)+(i.x-o.x)*(o.y-e.y))/n,o=((e.y-s.y)*(o.x-e.x)+(s.x-e.x)*(o.y-e.y))/n;if(0<i&&i<1&&0<o&&o<1)return!0}}return!1}map(t,e,s,i,o){return i+(o-i)*(t-e)/(s-e)}rotate(t,e){var s=Math.cos(e),e=Math.sin(e);return{x:Math.round(1e4*(t.x*s-t.y*e))/1e4,y:Math.round(1e4*(t.x*e+t.y*s))/1e4}}getValidAngles(o,n,h,t){let a=[];return o.angles.forEach(e=>{for(let t=e.min;t<=e.max;t++){var s=t*(Math.PI/180),s=this.rotate(h.vec,s),i={x:h.x+s.x*n,y:h.y+s.y*n};if(!(i.x<o.edgeDistance||i.y<o.edgeDistance||i.x>o.width-o.edgeDistance||i.y>o.height-o.edgeDistance)){let e=!1;for(let t=0;t<this.mapPositions.length-Math.ceil(o.pathDistance/o.length.min)-2;t++)if(distToSegment(i,this.mapPositions[t],this.mapPositions[t+1])<o.pathDistance){e=!0;break}e||!o.overlap&&this.checkCollision(h,i)||a.push(t)}}}),a}createOutline(e){this.outlineTop=[],this.outlineBot=[];var t=this.mapPositions[this.mapPositions.length-1];this.mapPositions.push(t);for(let t=0;t<this.mapPositions.length-1;t++){var s=this.mapPositions[t],i=this.mapPositions[t+1],o=Math.atan2(s.vec.y,s.vec.x),i=(o+Math.atan2(i.vec.y,i.vec.x))/2,n=(i+=Math.PI/2,{x:Math.cos(i),y:Math.sin(i)}),h={x:s.x+n.x*e/Math.cos(i-o+Math.PI/2),y:s.y+n.y*e/Math.cos(i-o+Math.PI/2)},s={x:s.x-n.x*e/Math.cos(i-o+Math.PI/2),y:s.y-n.y*e/Math.cos(i-o+Math.PI/2)};this.outlineTop.push(h),this.outlineBot.push(s)}this.mapPositions.splice(-1)}getStartPosition(t){let e=0,s={};switch(t.start[Math.floor(this.rand()*t.start.length)]){case"LEFT":return e=this.map(this.rand(),0,1,t.edgeDistance,t.height-t.edgeDistance),s={x:-64,y:e,vec:{x:1,y:0},segLength:0},this.mapPositions.push(s),{x:t.edgeDistance,y:e,vec:{x:1,y:0},segLength:64+t.edgeDistance};case"RIGHT":return e=this.map(this.rand(),0,1,t.edgeDistance,t.height-t.edgeDistance),s={x:t.width+64,y:e,vec:{x:-1,y:0},segLength:0},this.mapPositions.push(s),{x:t.width-t.edgeDistance,y:e,vec:{x:-1,y:0},segLength:64+t.edgeDistance};case"TOP":return e=this.map(this.rand(),0,1,t.edgeDistance,t.width-t.edgeDistance),s={x:e,y:-64,vec:{x:0,y:1},segLength:0},this.mapPositions.push(s),{x:e,y:t.edgeDistance,vec:{x:0,y:1},segLength:64+t.edgeDistance};case"BOT":return e=this.map(this.rand(),0,1,t.edgeDistance,t.width-t.edgeDistance),s={x:e,y:t.height+64,vec:{x:0,y:-1},segLength:0},this.mapPositions.push(s),{x:e,y:t.height-t.edgeDistance,vec:{x:0,y:-1},segLength:64+t.edgeDistance}}}getCurveControlPoints(e){var s=e.length-1,i={firstControlPoints:[],secondControlPoints:[]};for(let t=0;t<s;t++)i.firstControlPoints.push({}),i.secondControlPoints.push({});if(!(s<1))if(1==s)i.firstControlPoints[0].x=(2*e[0].x+e[1].x)/3,i.firstControlPoints[0].y=(2*e[0].y+e[1].y)/3,i.secondControlPoints[0].x=2*i.firstControlPoints[0].x-e[0].x,i.secondControlPoints[0].y=2*i.firstControlPoints[0].y-e[0].y;else{var o=[];for(let t=1;t<s-1;t++)o[t]=4*e[t].x+2*e[t+1].x;o[0]=e[0].x+2*e[1].x,o[s-1]=(8*e[s-1].x+e[s].x)/2;var n=this.getFirstControlPoints(o);for(let t=1;t<s-1;t++)o[t]=4*e[t].y+2*e[t+1].y;o[0]=e[0].y+2*e[1].y,o[s-1]=(8*e[s-1].y+e[s].y)/2;var h=this.getFirstControlPoints(o);for(let t=0;t<s;t++)i.firstControlPoints[t].x=n[t],i.firstControlPoints[t].y=h[t],t<s-1?(i.secondControlPoints[t].x=2*e[t+1].x-n[t+1],i.secondControlPoints[t].y=2*e[t+1].y-h[t+1]):(i.secondControlPoints[t].x=(e[s].x+n[s-1])/2,i.secondControlPoints[t].y=(e[s].y+h[s-1])/2)}return i}getFirstControlPoints(e){var s=e.length,i=[],o=[];let n=2;i[0]=e[0]/n;for(let t=1;t<s;t++)o[t]=1/n,n=(t<s-1?4:3.5)-o[t],i[t]=(e[t]-i[t-1])/n;for(let t=1;t<s;t++)i[s-t-1]-=o[s-t]*i[s-t];return i}}
class Planet extends PIXI.Container{constructor(e,t,a,r,s){super(),this.x=e,this.y=t,this.planetID=a,this.planetRand=mulberry32(s),this.defaultBorder=16711680,this.defaultSize="boss"==r?196:48+Math.round(32*this.planetRand()),this.planetType=this.getType(r),this.texture=this.planetType.texture,this.texture.anchor.set(.5),this.texture.width=this.defaultSize,this.texture.height=this.defaultSize,this.border=new PIXI.Graphics,this.setActive("start"==r),this.addChild(this.texture),this.addChild(this.border),this.texture.on("click",this.click),this.nextPlanets=[]}setActive(e){e?(this.interactive=!0,this.buttonMode=!0,this.border.clear(),this.border.lineStyle(3,65280),this.border.drawCircle(0,0,this.defaultSize/2)):(this.interactive=!1,this.buttonMode=!1,this.border.clear())}setVisited(){}click(){spaceScreen.clickPlanet(this)}getType(e){var a=[{name:"combat",percentage:20,texture:new PIXI.Sprite(resources.grassPlanet.texture),config:grassConfig,mapType:CombatMap},{name:"combat2",percentage:20,texture:new PIXI.Sprite(resources.crystalPlanet.texture),config:crystalConfig,mapType:CombatMap},{name:"combat3",percentage:20,texture:new PIXI.Sprite(resources.gasPlanet.texture),config:gasConfig,mapType:CombatMap},{name:"market",percentage:20,texture:new PIXI.Sprite(resources.spaceMarket.texture)},{name:"waste",percentage:20,texture:new PIXI.Sprite(resources.wastePlanet.texture)}];if("start"==e){let t=["combat","combat2","combat3"][Math.floor(3*this.planetRand())];return a.find(e=>e.name==t)}if("boss"==e)return{name:"boss",texture:new PIXI.Sprite(resources.bossPlanet.texture),config:bossConfig,mapType:CentipedeBossMap};var t,r=100*this.planetRand();let s=0;for(t of a)if(r<(s+=t.percentage))return 100*this.planetRand()<15&&(t.texture=new PIXI.Sprite(resources.unknownPlanet.texture),this.defaultSize=64),t}getScreen(){return"market"==this.planetType.name?new MarketPlanetScreen(4294967295*this.planetRand(),player.getNextRewardSeed()):"waste"==this.planetType.name?new WastePlanetScreen(4294967295*this.planetRand(),player.getNextRewardSeed()):gameScreen=new GameScreen(this.planetType.config,this.planetType.mapType,4294967295*this.planetRand(),player.getNextRewardSeed())}}
class SpaceShip extends PIXI.Container{constructor(t,e,h){super(),this.x=t,this.y=e,this.texture=new PIXI.Sprite(resources.spaceShip.texture),this.texture.anchor.set(.5),this.texture.width=128,this.texture.height=256,this.texture.rotation=h;var t={x:this.x-this.texture.width/2+12,y:this.y-this.texture.height/2+16},e={x:this.x+this.texture.width/2-12,y:this.y-this.texture.height/2+16},i={x:this.x+this.texture.width/2-40,y:this.y+this.texture.height/2-16},s={x:this.x-this.texture.width/2+40,y:this.y+this.texture.height/2-16},r=new PIXI.Matrix;r.identity().translate(-this.x,-this.y).rotate(h).translate(this.x,this.y),t=r.apply(t),e=r.apply(e),i=r.apply(i),s=r.apply(s),this.bounds=[t,e,i,s,t],this.addChild(this.texture)}}
class DeathScreen{constructor(t){this.x=0,this.size=72,this.bg=new Sprite(PIXI.Texture.WHITE),this.bg.width=width,this.bg.height=height,this.bg.tint=2897209,this.deathText=new PIXI.Text("Game Over",{fontFamily:"Arial",fontSize:144,fill:"red",align:"center",stroke:"black",lineJoin:"bevel",strokeThickness:5}),this.waveText=new PIXI.Text("You died on planet "+player.stage+" on wave "+t,{fontFamily:"Arial",fontSize:72,fill:"white",align:"center",stroke:"black",lineJoin:"bevel",strokeThickness:5}),this.returnButton=new Button("Back to Menu",width/2-100,height/2,200,50,this.click.bind(this)),this.deathText.x=width/2,this.deathText.y=45,this.deathText.anchor.set(.5,0),this.waveText.x=width/2,this.waveText.y=250,this.waveText.anchor.set(.5,0),this.container=new PIXI.Container,this.container.addChild(this.bg),this.container.addChild(this.deathText),this.container.addChild(this.waveText),this.container.addChild(this.returnButton)}update(){}click(){spaceScreen.cleanup(),setActiveScreen(new MenuScreen)}}
class DeckScreen{constructor(){this.container=new PIXI.Container;var e=new DeckView(this.back.bind(this),()=>{});this.container.addChild(e)}update(){}back(){setOverlay(null)}}
class GameScreen{constructor(e,t,s,i){this.rewardSeed=i,this.map=t.CREATE(s,e),this.ui=new UI(this),this.container=new PIXI.Container,this.entityContainer=new PIXI.Container,this.entityContainer.on("childAdded",this.sortEntities.bind(this)),this.entityContainer.on("childRemoved",this.checkEnd.bind(this)),this.pc=new PIXI.ParticleContainer,this.pc.setProperties({scale:!0,position:!0,rotation:!0,uvs:!0,alpha:!0}),this.container.addChild(this.map.container),this.container.addChild(this.pc),this.container.addChild(this.entityContainer),this.container.addChild(this.map.ship),this.container.addChild(this.ui.container),this.map.container.interactive=!0,this.map.container.on("pointermove",this.hoverMap.bind(this)),this.map.container.on("pointerover",this.enterMap.bind(this)),this.map.container.on("pointerout",this.leaveMap.bind(this)),this.map.container.on("click",this.clickMap.bind(this)),this.map.container.on("rightclick",this.rightClickMap.bind(this)),this.ui.bg.interactive=!0,this.ui.bg.on("rightclick",this.deselectCard.bind(this)),this.ui.bg.on("click",this.deselectCard.bind(this)),this.key1=keyboard("1"),this.key2=keyboard("2"),this.key3=keyboard("3"),this.key4=keyboard("4"),this.key5=keyboard("5"),this.key6=keyboard("6"),this.key7=keyboard("7"),this.key8=keyboard("8"),this.key9=keyboard("9"),this.key0=keyboard("0"),this.keySpace=keyboard(" "),this.keyRight=keyboard("ArrowRight"),this.keyLeft=keyboard("ArrowLeft"),this.key1.press=()=>this.selectCardFromIndex(0),this.key2.press=()=>this.selectCardFromIndex(1),this.key3.press=()=>this.selectCardFromIndex(2),this.key4.press=()=>this.selectCardFromIndex(3),this.key5.press=()=>this.selectCardFromIndex(4),this.key6.press=()=>this.selectCardFromIndex(5),this.key7.press=()=>this.selectCardFromIndex(6),this.key8.press=()=>this.selectCardFromIndex(7),this.key9.press=()=>this.selectCardFromIndex(8),this.key0.press=()=>this.selectCardFromIndex(9),this.keySpace.press=()=>this.startLevel(),this.keyRight.press=()=>this.ui.clickFastButton(),this.keyLeft.press=()=>this.ui.clickSlowButton(),this.mouseOnMap=!1,this.round=1,this.waves=[],this.waves.push(this.map.getWave(this.round)),this.waves.push(this.map.getWave(this.round+1)),this.energy=player.maxEnergy,this.currentTC=0,this.globalBuffs=[],this.currentMonsterList=[],this.monsterInWave=this.currentMonsterList.length,this.deck=[],this.hand=[],this.discardPile=[],this.selectedCard=null,this.levelStarted=!1;for(var r of this.map.initialSpawns)this.entityContainer.addChild(r);this.spawnClock=0,this.setupDeck(),this.drawPhase(),events.invoke("onLevelStart",this),this.explosiveRoundsEmitter=new PIXI.particles.Emitter(this.pc,explosiveRoundsParticles),this.explosiveRoundsEmitter.emit=!1,this.cannonBlastEmitter=new PIXI.particles.Emitter(this.pc,cannonBlastParticles),this.cannonBlastEmitter.emit=!1}update(){var e;this.levelStarted&&(this.spawnClock+=deltaTime,0!=this.currentMonsterList.length)&&this.spawnClock>=this.currentMonsterList[0].spawnCD&&null!=(e=this.currentMonsterList.shift())&&this.entityContainer.addChild(e),this.updateBuffs();for(let e=0;e<this.entityContainer.children.length;e++)this.entityContainer.children[e].update();this.currentTC=this.entityContainer.children.filter(e=>e.type==entityType.TOWER&&e.placed).map(e=>e.TC).reduce((e,t)=>e+t,0),this.sortEntities(),this.ui.update(),this.explosiveRoundsEmitter.update(deltaTime/1e3),this.cannonBlastEmitter.update(deltaTime/1e3)}recieveDamage(e){player.hp-=e,events.invoke("onPlayerDamage",e),player.hp<=0&&(player.hp=0,this.cleanup(),setActiveScreen(new DeathScreen(this.round)))}updateBuffs(){this.hand.forEach(e=>e.cost=e.cardObject.cost);for(let e=this.globalBuffs.length-1;0<=e;e--){var t=this.globalBuffs[e];gameScreen.levelStarted&&t.tags.includes(buffTags.TIMED)&&(t.duration-=deltaTime,t.duration<=0)?this.removeBuff(t):(t.effect(this),t.updateBuffIcon())}}addBuff(t){if(t.tags.includes(buffTags.UNIQUE)){var e=this.globalBuffs.find(e=>e.uniqueTag==t.uniqueTag);if(null!=e)return void(e.tags.includes(buffTags.CONCAT_DURATION)?(e.duration+=t.duration,e.baseDuration+=t.baseDuration):e.tags.includes(buffTags.REFRESH_DURATION)?(e.duration=t.duration,e.baseDuration=t.baseDuration):e.tags.includes(buffTags.STACKS)&&e.stacks++)}t.onApply(this),this.globalBuffs.push(t),this.ui.globalBuffIconContainer.addChild(t.iconContainer)}removeBuff(e){e.onRemove(this),this.globalBuffs.splice(this.globalBuffs.indexOf(e),1),this.ui.globalBuffIconContainer.removeChild(e.iconContainer)}checkEnd(){this.levelStarted&&0==this.currentMonsterList.length&&0==this.entityContainer.children.filter(e=>e.type==entityType.MONSTER&&!e.ignore).length&&(this.levelStarted=!1,this.round<this.map.maxRounds?(events.invoke("onClear"),this.removeBuffs(),this.ui.startButton.enable(),this.round++,this.waves.push(this.map.getWave(this.round+1)),this.drawPhase()):(events.invoke("onLevelEnd"),this.endLevel()))}endLevel(){0<player.hp&&(this.cleanup(),setActiveScreen(new RewardScreen(this.rewardSeed)))}winRun(){this.cleanup(),setActiveScreen(new VictoryScreen(this.round))}startLevel(){this.levelStarted||(this.currentMonsterList=[...this.waves[this.round-1]],this.monsterInWave=this.currentMonsterList.length,this.spawnClock=0,this.levelStarted=!0,this.ui.startButton.disable())}setupDeck(){for(var e of player.deck){e=new Card(Function("return new "+e)());this.deck.push(e)}shuffle(this.deck,player.deckRand)}drawCard(){0==this.deck.length&&this.reshuffle();var e=this.deck.shift();this.cardToHand(e)}drawTurret(){0==this.deck.length&&this.reshuffle();for(let e=0;e<this.deck.length;e++){var t;if(this.deck[e].type==cardType.TOWER&&this.deck[e].cardObject.tags.includes(towerTags.DAMAGE))return t=this.deck[e],this.deck.splice(e,1),this.cardToHand(t),!0}return!1}cardToHand(e){this.hand.length<10?(this.hand.push(e),this.ui.cardToHand(e)):e.cardObject.tags.includes(spellTags.DEPLETE)||this.discardPile.push(e)}drawPhase(){this.deselectCard(),this.discardHand(),this.energy=player.maxEnergy;var t=1==this.round&&this.drawTurret()?4:5;for(let e=0;e<t;e++)this.drawCard();events.invoke("onDrawPhase",this)}reshuffle(){this.deck=this.discardPile,this.discardPile=[],shuffle(this.deck,player.deckRand)}discardHand(){for(let e=this.hand.length-1;0<=e;e--){var t=this.hand[e];t.persistentKey?t.persistentKey=!1:t.cardObject.tags.includes(spellTags.DEPLETE)?this.destroyCard(t):this.discardCard(t)}}discardCard(e){this.hand.splice(this.hand.indexOf(e),1),this.ui.removeFromHand(e),this.discardPile.push(e),this.selectedCard==e&&(e.deselect(),this.selectedCard=null,this.ui.clearTargets())}destroyCard(e){this.hand.splice(this.hand.indexOf(e),1),this.ui.removeFromHand(e),this.selectedCard==e&&(e.deselect(),this.selectedCard=null,this.ui.clearTargets())}selectCard(e){this.deselectCard(),e.select()&&(this.selectedCard=e,this.ui.highlightTargets(e)),this.ui.bringCardToFront(e)}deselectCard(){null!=this.selectedCard&&(this.mouseOnMap&&this.selectedCard.leaveMap(),this.selectedCard.deselect(),this.selectedCard=null,this.ui.bringCardToFront(null),this.ui.clearTargets())}selectCardFromIndex(e){e>=this.hand.length||(e=this.hand[e],this.mouseOnMap&&null!=this.selectedCard&&this.selectedCard.leaveMap(),this.selectCard(e),this.mouseOnMap&&null!=this.selectedCard&&this.selectedCard.enterMap(this.mousePos))}hoverMap(e){e=e.data.global;null!=this.selectedCard&&this.selectedCard.hoverMap(e)}enterMap(e){e=e.data.global;this.mouseOnMap=!0,this.mousePos=e,null!=this.selectedCard&&this.selectedCard.enterMap(e)}leaveMap(){this.mouseOnMap=!1,null!=this.selectedCard&&this.selectedCard.leaveMap()}clickMap(e){this.ui.showTowerInfo(null);e=e.data.global;null!=this.selectedCard&&this.selectedCard.clickMap(e)}rightClickMap(e){this.deselectCard(),this.ui.showTowerInfo(null)}sortEntities(){this.entityContainer.children.sort((e,t)=>e.type==entityType.MONSTER&&t.type==entityType.MONSTER?e.distTraveled-t.distTraveled:e.layer==t.layer?e.y-t.y:e.layer-t.layer)}removeBuffs(){this.entityContainer.children.filter(e=>e.type==entityType.TOWER).forEach(t=>{t.buffs.filter(e=>e.tags.includes(buffTags.TIMED)).forEach(e=>t.removeBuff(e))}),this.globalBuffs.filter(e=>e.tags.includes(buffTags.TIMED)).forEach(e=>{this.removeBuff(e)})}cleanup(){this.key1.unsubscribe(),this.key2.unsubscribe(),this.key3.unsubscribe(),this.key4.unsubscribe(),this.key5.unsubscribe(),this.key6.unsubscribe(),this.key7.unsubscribe(),this.key8.unsubscribe(),this.key9.unsubscribe(),this.key0.unsubscribe(),this.keySpace.unsubscribe(),this.keyRight.unsubscribe(),this.keyLeft.unsubscribe(),this.cannonBlastEmitter.destroy(),this.explosiveRoundsEmitter.destroy(),speed=1}}
class LoadingScreen{constructor(){this.loadingText=new PIXI.Text("Loading...",{fontFamily:"Arial",fontSize:72,fill:"white",align:"center",stroke:"black",lineJoin:"bevel",strokeThickness:5}),this.loadingText.x=width/2,this.loadingText.y=height/2-200,this.loadingText.anchor.set(.5,0),this.barFrame=new PIXI.Graphics,this.barFrame.lineStyle(6,0,1),this.barFrame.beginFill(0,0),this.barFrame.drawRect(width/2-250,height/2,500,70),this.barFrame.endFill(),this.progBar=new PIXI.Graphics,this.progBar.beginFill(16777215),this.progBar.drawRect(0,0,500,70),this.progBar.endFill(),this.progBar.x=width/2-250,this.progBar.y=height/2,this.progBar.width=0,this.container=new PIXI.Container,this.container.addChild(this.loadingText),this.container.addChild(this.progBar),this.container.addChild(this.barFrame)}progress(i){i=i.progress/100;this.progBar.width=500*i}}
class MarketPlanetScreen{constructor(e,t){this.container=new PIXI.Container,this.bg=new Sprite(PIXI.Texture.WHITE),this.bg.width=width,this.bg.height=height,this.bg.tint=0,this.container.addChild(this.bg),this.mapRand=mulberry32(e),this.deckRand=mulberry32(t),this.fillBG(),this.stationTexture=new PIXI.Sprite(resources.spaceMarket.texture),this.stationTexture.width*=.9,this.stationTexture.height*=.9,this.stationTexture.x=(width-this.stationTexture.width)/2,this.stationTexture.y=(height-this.stationTexture.height)/2,this.container.addChild(this.stationTexture),this.ship=new SpaceShip(width/2+300,height/2+300,.75*Math.PI),this.container.addChild(this.ship),this.mainUI=this.getMainUI(),this.setUI(this.mainUI)}setUI(e){null!=this.currentUI&&this.container.removeChild(this.currentUI),this.currentUI=e,this.container.addChild(this.currentUI)}update(){}clickLeave(){setActiveScreen(spaceScreen)}fillBG(){var e,t=new PoissonDiskSampling({shape:[width,height],minDistance:100,maxDistance:200,tries:20},this.mapRand),i=new PIXI.Graphics;i.beginFill(16777215);for(e of t.fill())i.drawCircle(e[0],e[1],2*this.mapRand()+1);i.endFill(),this.container.addChild(i)}getMainUI(){var s=new PIXI.Container,e=new PIXI.Graphics,t=1500,i=950,t=(s.x=(width-t)/2,s.y=(height-i)/2,e.beginFill(2105376,.8),e.drawRoundedRect(0,0,t,i,10),e.endFill(),s.addChild(e),new PIXI.Text("Shop",{fontFamily:"Arial",fontSize:48,fill:"white",stroke:"black",lineJoin:"bevel",strokeThickness:4})),i=new Button("Leave",1350,850,100,50,this.clickLeave.bind(this)),l=(t.x=750,t.y=20,t.anchor.set(.5,0),s.addChild(t),s.addChild(i),[...marketOffers]);for(let n=0;n<3;n++){let a=null;switch(n){case 0:a=cardType.TOWER;break;case 1:a=null;break;case 2:a=cardType.SPELL}for(let r=0;r<2;r++){var c=this.pickOffer(a,l);let e=c.card,t=c.cardName,i=new PIXI.Text(e.marketPrice+" G",{fontFamily:"Arial",fontSize:24,fill:"gold",stroke:"black",lineJoin:"bevel",strokeThickness:4});e.x=200*r+750-e.width-5+500*(n-1),e.y=100,i.x=200*r+750-e.width/2-5+500*(n-1),i.y=360,i.anchor.set(.5,0),e.removeAllListeners(),e.on("mouseover",()=>this.cardEnter(e)),e.on("mouseout",()=>this.cardLeave(e)),e.on("click",()=>this.clickCard(e,t,i)),s.addChild(e),s.addChild(i)}}e=this.createMaxHPOffer(5,100),e.x=1091,e.y=550,t=this.createMaxHPOffer(10,200);t.x=1291,t.y=550,s.addChild(e),s.addChild(t);for(let e=0;e<4;e++){var r=this.pickAccessory();r.x=75+220*e,r.y=530,s.addChild(r)}return s}pickOffer(e,t){let i=!1,r,a;for(;!i;)a=t.splice(Math.floor(this.deckRand()*t.length),1)[0],r=new Card(Function("return new "+a)()),null==e||r.type==e?i=!0:t.push(a);let n=20;switch(r.type){case cardType.TOWER:n=90+Math.floor(51*this.deckRand());break;case cardType.SPELL:n=70+Math.floor(41*this.deckRand());break;default:n=20}return r.marketPrice=n,{card:r,cardName:a}}pickAccessory(){var t=new PIXI.Container,i=availableAccessories.splice(Math.floor(this.deckRand()*availableAccessories.length),1)[0];if(null!=i){let e=i.CREATE();i=180+Math.floor(61*this.deckRand()),i=(e.price=i,e.interactive=!0,e.buttonMode=!0,e.on("click",()=>this.clickAccessory(e)),new PIXI.Text(i+" G",{fontFamily:"Arial",fontSize:24,fill:"gold",stroke:"black",lineJoin:"bevel",strokeThickness:4}));i.x=80,i.y=160,i.anchor.set(.5,0),t.addChild(e),t.addChild(i)}return t}createMaxHPOffer(e,t){var i=new PIXI.Container;let r=new PIXI.Sprite(resources.heartIcon.texture);r.width=128,r.height=128,r.interactive=!0,r.buttonMode=!0,r.on("click",()=>this.clickHeart(r)),r.price=t,r.hpIncrease=e;t=new PIXI.Text(t+" G",{fontFamily:"Arial",fontSize:24,fill:"gold",stroke:"black",lineJoin:"bevel",strokeThickness:4}),t.x=64,t.y=140,t.anchor.set(.5,0),e=new PIXI.Text("+"+e+" max HP",{fontFamily:"Arial",fontSize:16,fill:"white",stroke:"black",lineJoin:"bevel",strokeThickness:2});return e.x=64,e.y=60,e.anchor.set(.5),i.addChild(r),i.addChild(t),i.addChild(e),i}clickHeart(e){player.money>=e.price&&(player.money-=e.price,player.maxHP+=e.hpIncrease,player.hp+=e.hpIncrease,(e=e.parent).parent.removeChild(e))}clickAccessory(e){player.money>=e.price&&(player.money-=e.price,e.equip(),(e=e.parent).parent.removeChild(e))}cardEnter(e){e.cardFrame.tint=16776960}cardLeave(e){e.cardFrame.tint=0}clickCard(e,t,i){null!=e&&player.money>=e.marketPrice&&(player.deck.push(t),(t=e.parent).removeChild(e),t.removeChild(i),player.money-=e.marketPrice)}static CREATE_OFFERS(){availableAccessories=[Accumulators,BetterPowder,PersistentStorage,PrechargedAttackSystems,EmergencyReserve,ProtectiveCharges,StarterPack,Repairbot,HardenedPolish]}}const marketOffers=["MinigunTower","TempestTower","SniperNest","AmmoRefinery","Adjust","CannonBlast","Overcharge","Refine","BoxOfHollowPoints"];let availableAccessories=[];
class MenuScreen{constructor(){document.getElementById("seedText").textContent="",Topbar.REMOVE();var t=window.location.search,t=new URLSearchParams(t);this.size=72,this.bg=new Sprite(PIXI.Texture.WHITE),this.bg.width=width,this.bg.height=height,this.bg.tint=2897209,this.titleText=new PIXI.Text("RogueDeckTD",{fontFamily:"Arial",fontSize:96,fill:"white",align:"center",stroke:"black",lineJoin:"bevel",strokeThickness:5}),this.startButton=new Button("Start Game",width/2-100,height/2-200,200,50,this.click.bind(this)),this.mapSeedInput=this.createInputBox(),this.mapSeedInput.placeholder="Random Map Seed",this.mapSeedInput.x=width/2+2,this.mapSeedInput.y=height/2-125,this.deckSeedInput=this.createInputBox(),this.deckSeedInput.placeholder="Random Deck Seed",this.deckSeedInput.x=width/2+2,this.deckSeedInput.y=height/2-50,t.has("ms")&&(this.mapSeedInput.text=t.get("ms").substring(0,8)),t.has("ds")&&(this.deckSeedInput.text=t.get("ds").substring(0,8)),this.titleText.x=width/2,this.titleText.y=45,this.titleText.anchor.set(.5,0),this.errorText=new PIXI.Text("Error",{fontFamily:"Arial",fontSize:24,fill:"red",align:"center",stroke:"black",lineJoin:"bevel",strokeThickness:2}),this.errorText.x=width/2,this.errorText.y=height/2+20,this.errorText.anchor.set(.5,0),this.errorText.visible=!1,this.container=new PIXI.Container,this.container.addChild(this.bg),this.container.addChild(this.titleText),this.container.addChild(this.startButton),this.container.addChild(this.mapSeedInput),this.container.addChild(this.deckSeedInput),this.container.addChild(this.errorText)}update(){}click(){var t,e;""==this.mapSeedInput.text||this.mapSeedInput.text.match("[A-Fa-f0-9]{8}")?""==this.deckSeedInput.text||this.deckSeedInput.text.match("[A-Fa-f0-9]{8}")?(t=""==this.mapSeedInput.text?Math.round(4294967295*Math.random()):parseInt(this.mapSeedInput.text,16),e=""==this.deckSeedInput.text?Math.round(4294967295*Math.random()):parseInt(this.deckSeedInput.text,16),this.mapSeedInput.destroy(),this.deckSeedInput.destroy(),player=new Player("Spaceship",t,e),spaceScreen=new SpaceScreen,events=new EventManager,MarketPlanetScreen.CREATE_OFFERS(),setActiveScreen(spaceScreen)):(this.errorText.text="Invalid Deck Seed",this.errorText.visible=!0):(this.errorText.text="Invalid Map Seed",this.errorText.visible=!0)}createInputBox(){var t=new PIXI.TextInput({input:{fontSize:"20px",padding:"8px",width:"184px",height:"34px",color:"#26272E",textAlign:"center",fontFamily:"Consolas",resolution:2},box:{default:{fill:16777215,rounded:10,stroke:{color:0,width:4}},focused:{fill:14474460,rounded:10,stroke:{color:0,width:4}},disabled:{fill:16777215,rounded:10,stroke:{color:0,width:4}}}});return t._surrogate.resolution=2,t.pivot.x=t.width/2,t.maxLength=8,t}}
class RewardScreen{constructor(e){this.container=new PIXI.Container,this.bg=new Sprite(PIXI.Texture.WHITE),this.bg.width=width,this.bg.height=height,this.bg.tint=2897209,this.stageText=new PIXI.Text("You cleared planet "+player.stage,{fontFamily:"Arial",fontSize:64,fill:"white",align:"center",stroke:"black",lineJoin:"bevel",strokeThickness:5}),this.rewardText=new PIXI.Text("Pick a reward",{fontFamily:"Arial",fontSize:48,fill:"lime",align:"center",stroke:"black",lineJoin:"bevel",strokeThickness:5}),this.moneyText=new PIXI.Text("+ x G",{fontFamily:"Arial",fontSize:32,fill:"gold",align:"center",stroke:"black",lineJoin:"bevel",strokeThickness:5}),this.skipButton=new Button("Skip",width/2-100,height/2+100,200,50,this.click.bind(this)),this.rewardText.x=width/2,this.rewardText.y=180,this.rewardText.anchor.set(.5,0),this.stageText.x=width/2,this.stageText.y=50,this.stageText.anchor.set(.5,0),this.moneyText.x=width/2,this.moneyText.y=height/2+200,this.moneyText.anchor.set(.5,0),this.container.addChild(this.bg),this.container.addChild(this.rewardText),this.container.addChild(this.stageText),this.container.addChild(this.skipButton),this.container.addChild(this.moneyText);var n=mulberry32(e),r=[...rewardPool];for(let i=0;i<3;i++){let e=r.splice(Math.floor(n()*r.length),1)[0],t=new Card(Function("return new "+e)());t.x=width/2-t.cardWidth/2+250*(i-1),t.y=300,t.removeAllListeners(),t.on("mouseover",()=>this.cardEnter(t)),t.on("mouseout",()=>this.cardLeave(t)),t.on("click",()=>this.click(e)),this.container.addChild(t)}e=20+Math.floor(11*n());this.moneyText.text="+ "+e+" G",player.money+=e}update(){}cardEnter(e){e.cardFrame.tint=16776960}cardLeave(e){e.cardFrame.tint=0}click(e){null!=e&&player.deck.push(e),setActiveScreen(spaceScreen)}}const rewardPool=["AmmoRefinery","MinigunTower","TempestTower","SniperNest","Adjust","CannonBlast","Overcharge","Refine","BoxOfHollowPoints"];
class SpaceScreen{constructor(){this.bg=new Sprite(PIXI.Texture.WHITE),this.bg.width=width,this.bg.height=height,this.bg.tint=0,this.container=new PIXI.Container,this.container.addChild(this.bg),this.planets=[],this.lastPlanet=null,this.pathCount=5,this.layers=7,this.startPoint=[0,Math.floor(this.pathCount/2)],this.endPoint=[this.layers+1,Math.floor(this.pathCount/2)],this.spaceMapSeed=player.getNextMapSeed(),this.planetMapSeed=player.getNextMapSeed(),this.starBackgroundSeed=player.getNextMapSeed(),this.planetSeedRand=mulberry32(this.planetMapSeed),this.setupSpaceMap(),this.spaceShip=new SpaceShip(-200,0,-Math.PI/2),this.spaceShip.texture.width=24,this.spaceShip.texture.height=48,this.container.addChild(this.spaceShip);var t=this.createHolo();t.y=height-300,this.container.addChild(t),this.keyA=keyboard("a"),this.keyA.press=()=>{this.planets.forEach(t=>t.setActive(!0))}}createHolo(){var t,e=new PIXI.Container,i=new PIXI.Graphics,h=(i.beginFill(12288),i.drawRoundedRect(-20,0,190,320,10),i.endFill(),e.addChild(i),[new PIXI.Sprite(resources.grassPlanet.texture),new PIXI.Sprite(resources.crystalPlanet.texture),new PIXI.Sprite(resources.gasPlanet.texture),new PIXI.Sprite(resources.wastePlanet.texture),new PIXI.Sprite(resources.spaceMarket.texture),new PIXI.Sprite(resources.bossPlanet.texture),new PIXI.Sprite(resources.unknownPlanet.texture)]);for(t of h)t.width=32,t.height=32,t.anchor.set(.5),i.addChild(t);h[0].x=20,h[0].y=50,h[1].x=60,h[1].y=50,h[2].x=100,h[2].y=50,h[3].x=20,h[3].y=125,h[4].x=20,h[4].y=200,h[5].x=140,h[5].y=50,h[6].x=20,h[6].y=275;h=new PIXI.Text("Inhabited:",{fontFamily:"Arial",fontSize:20,fill:"white"}),h.x=5,h.y=5,e.addChild(h),h=new PIXI.Text("Uninhabited:",{fontFamily:"Arial",fontSize:20,fill:"white"}),h.x=5,h.y=80,e.addChild(h),h=new PIXI.Text("Space Market:",{fontFamily:"Arial",fontSize:20,fill:"white"}),h.x=5,h.y=155,e.addChild(h),h=new PIXI.Text("Unknown:",{fontFamily:"Arial",fontSize:20,fill:"white"});return h.x=5,h.y=230,e.addChild(h),e.alpha=.8,e}update(){}clickPlanet(t){this.spaceShip.x=t.x,this.spaceShip.y=t.y-64,null!=this.lastPlanet&&(this.highlightPath.moveTo(this.lastPlanet.x,this.lastPlanet.y),this.highlightPath.lineTo(t.x,t.y)),t.setVisited(),this.nextPlanetPath.clear(),this.nextPlanetPath.lineStyle(3,11206570);for(var e of this.planets)e.setActive(!1);for(var i of t.nextPlanets)i.setActive(!0),this.nextPlanetPath.moveTo(t.x,t.y),this.nextPlanetPath.lineTo(i.x,i.y);this.lastPlanet=t,player.stage++,setActiveScreen(t.getScreen())}setupSpaceMap(){this.graph=createGraph();var t,e=mulberry32(this.starBackgroundSeed),i=mulberry32(this.spaceMapSeed),h=(this.pdsObj=new PoissonDiskSampling({shape:[width,height],minDistance:100,maxDistance:200,tries:20},e),new PIXI.Graphics);h.beginFill(16777215);for(t of this.pdsObj.fill())h.drawCircle(t[0],t[1],2*e()+1);h.endFill(),this.container.addChild(h),this.pathGraphic=new PIXI.Graphics,this.container.addChild(this.pathGraphic),this.pathGraphic.lineStyle(2,8421631),this.highlightPath=new PIXI.Graphics,this.container.addChild(this.highlightPath),this.highlightPath.lineStyle(3,16777088),this.nextPlanetPath=new PIXI.Graphics,this.container.addChild(this.nextPlanetPath);var a=[];for(let e=0;e<this.layers;e++){var s=[];for(let t=0;t<this.pathCount;t++)s.push([e+1+(.4*i()-.2),t+(.4*i()-.2)]);a.push(s)}for(let e=0;e<this.layers-1;e++)for(let t=0;t<this.pathCount;t++)this.graph.addLink(a[e][t],a[e+1][t],{weight:1+Math.abs(t-Math.floor(this.pathCount/2))}),0!=t&&this.graph.addLink(a[e][t],a[e+1][t-1],{weight:1.5+Math.max(0,Math.floor(this.pathCount/2)-t)}),t!=this.pathCount-1&&this.graph.addLink(a[e][t],a[e+1][t+1],{weight:1.5+Math.max(0,t-Math.floor(this.pathCount/2))});this.graph.addLink(this.startPoint,a[0][this.startPoint[1]],{weight:1}),this.graph.addLink(this.startPoint,a[0][this.startPoint[1]-1],{weight:1.5}),this.graph.addLink(this.startPoint,a[0][this.startPoint[1]+1],{weight:1.5}),this.graph.addLink(a[this.layers-1][this.endPoint[1]],this.endPoint,{weight:1}),this.graph.addLink(a[this.layers-1][this.endPoint[1]-1],this.endPoint,{weight:1.5}),this.graph.addLink(a[this.layers-1][this.endPoint[1]+1],this.endPoint,{weight:1.5});var n=[];let r=[];var l,d=[];for(let t=0;t<1.5*this.layers;t++){var o=ngraphPath.aStar(this.graph,{distance(t,e,i){return i.data.weight}}).find(this.startPoint,this.endPoint);if(0===o.length)break;d.push(o),n.push(...o.map(t=>t.id)),this.pathGraphic.moveTo(this.endPoint[0]/(this.layers+1)*(width-200)+100,this.endPoint[1]/(this.pathCount-1)*(height-400)+200);for(let t=0;t<o.length;t++){var p=o[t].id[0]/(this.layers+1)*(width-200)+100,P=o[t].id[1]/(this.pathCount-1)*(height-400)+200;this.pathGraphic.lineTo(p,P)}0==r.length&&(r=Array(this.layers).fill().map((t,e)=>e));var c=Math.floor(i()*r.length),c=r.splice(c,1)[0]+1;this.graph.removeNode(o[c].id)}for(l of[...new Set(n)]){var g=l[0]/(this.layers+1)*(width-200)+100,u=l[1]/(this.pathCount-1)*(height-400)+200;let t="default";l==this.startPoint&&(t="start"),l==this.endPoint&&(t="boss");g=new Planet(g,u,l,t,this.createPlanetSeed());this.planets.push(g),this.container.addChild(g)}for(let i of d)for(let e=i.length-1;0<e;e--){var w=this.planets.find(t=>t.planetID===i[e].id),y=this.planets.find(t=>t.planetID===i[e-1].id);w.nextPlanets.push(y)}}createPlanetSeed(){return Math.round(4294967295*this.planetSeedRand())}cleanup(){this.keyA.unsubscribe()}}
class VictoryScreen{constructor(t){this.x=0,this.size=72,this.bg=new Sprite(PIXI.Texture.WHITE),this.bg.width=width,this.bg.height=height,this.bg.tint=2897209,this.victoryText=new PIXI.Text("Victory",{fontFamily:"Arial",fontSize:144,fill:"yellow",align:"center",stroke:"black",lineJoin:"bevel",strokeThickness:5}),this.waveText=new PIXI.Text("You killed the boss in "+t+" waves",{fontFamily:"Arial",fontSize:72,fill:"white",align:"center",stroke:"black",lineJoin:"bevel",strokeThickness:5}),this.returnButton=new Button("Back to Menu",width/2-100,height/2,200,50,this.click.bind(this)),this.victoryText.x=width/2,this.victoryText.y=45,this.victoryText.anchor.set(.5,0),this.waveText.x=width/2,this.waveText.y=250,this.waveText.anchor.set(.5,0),this.container=new PIXI.Container,this.container.addChild(this.bg),this.container.addChild(this.victoryText),this.container.addChild(this.waveText),this.container.addChild(this.returnButton)}update(){}click(){setActiveScreen(new MenuScreen)}}
class WastePlanetScreen{constructor(i,e){this.container=new PIXI.Container,this.bg=new Sprite(PIXI.Texture.WHITE),this.bg.width=width,this.bg.height=height,this.bg.tint=10526880,this.container.addChild(this.bg),this.mapRand=mulberry32(i),this.rewardRand=mulberry32(e),this.fillBG(),this.ship=new SpaceShip(width/2+300,height/2+300,.75*Math.PI),this.container.addChild(this.ship),this.mainUI=this.getMainUI(),this.trashUI=this.getCradTrashUI(),this.setUI(this.mainUI)}setUI(i){null!=this.currentUI&&this.container.removeChild(this.currentUI),this.currentUI=i,this.container.addChild(this.currentUI)}update(){}clickOK(){setActiveScreen(spaceScreen)}clickRepair(){var i=5+Math.round(5*this.rewardRand()),i=(this.repairAmount=player.heal(i),this.getRepairUI());this.setUI(i)}clickTrash(){this.setUI(this.trashUI)}clickBack(){this.setUI(this.mainUI)}clickCard(i){player.deck.splice(player.deck.indexOf(i),1),setActiveScreen(spaceScreen)}cardEnter(i){i.cardFrame.tint=16776960}cardLeave(i){i.cardFrame.tint=0}fillBG(){var i,e=new PoissonDiskSampling({shape:[width,height],minDistance:500,maxDistance:700,tries:20},this.mapRand),t=new PIXI.Graphics;t.beginFill(8421504);for(i of e.fill())t.drawCircle(i[0],i[1],128*this.mapRand()+32);t.endFill(),this.container.addChild(t)}getMainUI(){var i=new PIXI.Container,e=new PIXI.Graphics,t=new PIXI.Container,e=(t.x=400,t.y=100,e.beginFill(2105376,.8),e.drawRoundedRect(0,0,800,200,10),e.endFill(),t.addChild(e),new PIXI.Text("You find yourself on a wasteland.\n\nFacing the amounts of trashed spacecraft components you\ncontemplate what to do...",{fontFamily:"Arial",fontSize:24,fill:"white",stroke:"black",lineJoin:"bevel",strokeThickness:3})),e=(e.x=10,e.y=10,t.addChild(e),i.addChild(t),new Button("",400,350,300,150,this.clickRepair.bind(this))),t=new Button("",900,350,300,150,this.clickTrash.bind(this)),n=new PIXI.Text("...REPAIR\n\nyour ship using parts\nlying around you.",{fontFamily:"Arial",fontSize:24,fill:"black"}),a=new PIXI.Text("...TRASH\n\na card from your deck.\nThe additional waste\nwon't disturb anyone.",{fontFamily:"Arial",fontSize:24,fill:"black"});return n.x=410,n.y=360,a.x=910,a.y=360,i.addChild(e),i.addChild(t),i.addChild(n),i.addChild(a),i}getRepairUI(){var i=new PIXI.Container,e=new PIXI.Graphics,t=new PIXI.Container,e=(t.x=400,t.y=100,e.beginFill(2105376,.8),e.drawRoundedRect(0,0,800,200,10),e.endFill(),t.addChild(e),"You managed to find some useful components.\n\n"),e=(e+=0==this.repairAmount?"Since there was no need for any reparations,\nyou decided to leave these parts for somebody else to find.":"After some tinkering your ship regained "+this.repairAmount+" HP.",new PIXI.Text(e,{fontFamily:"Arial",fontSize:24,fill:"white",stroke:"black",lineJoin:"bevel",strokeThickness:3})),e=(e.x=10,e.y=10,t.addChild(e),i.addChild(t),new Button("OK",1100,320,100,50,this.clickOK.bind(this)));return i.addChild(e),i}getCradTrashUI(){var i=new DeckView(this.clickBack.bind(this),this.clickCard);return i.titleText.text="Choose a card.",i}}
class Entity extends PIXI.Container{constructor(e,t){super(),this.x=e,this.y=t,this.layer=0,this.type=entityType.NONE,this.entered=!1}update(){}remove(){gameScreen.entityContainer.removeChild(this)}addToStage(){gameScreen.entityContainer.addChild(this)}}const entityType={NONE:"none",MONSTER:"monster",TOWER:"tower",PROJECTILE:"projectile",SPELL_EFFECT:"spell effect"};
class Monster extends Entity{static SPAWN(t,i,e,h,s){t=new this(t,i,e);return t.spawnCD=h,[t]}constructor(t,i,e){super(t,i),this.type=entityType.MONSTER,this.distTraveled=0,this.oldvx=0,this.oldvy=0,this.oldhp=0,this.spawnCD=0,this.hpBar=new PIXI.Graphics,this.addChild(this.hpBar),this.showBar=!0,this.barSize={x:-24,y:-45,width:48,height:5,frameWidth:1},this.hpFrame=new PIXI.Graphics,this.addChild(this.hpFrame),this.setArmor(0),this.setHP(e),this.immune=!1}update(){this.distTraveled+=this.speed*deltaTime/1e3;var t=gameScreen.map.getPosition(this.distTraveled);null==t?(gameScreen.recieveDamage(Math.ceil(this.hp*this.damageMultiplier)),this.remove(),this.onLeak()):(this.x=t.x,this.y=t.y,this.rotate(t.rot)),this.oldhp!=this.hp&&(this.drawHPBar(),this.oldhp=this.hp)}setHP(t){this.hp=t,this.maxHP=t}setArmor(t){this.armor=t,this.baseArmor=t}recieveDamage(i,e){if(!this.immune){null==i.percentagePen&&(i.percentagePen=0),null==i.flatPen&&(i.flatPen=0);let t=i.amount;var h=this.armor*(1-i.percentagePen);h-=i.flatPen,"NORMAL"==i.damageType&&(t*=100/(100+h)),t=Math.min(this.hp,t),this.hp-=t,this.onDamaged(t,e),this.hp<=0&&(this.remove(),this.onDeath()),e.countDamage(t)}}drawHPBar(){this.hpBar.clear(),this.hpFrame.clear(),this.showBar&&(this.hpBar.beginFill(16724016),this.hpBar.drawRect(this.barSize.x,this.barSize.y,this.barSize.width*(this.hp/this.maxHP),this.barSize.height),this.hpBar.endFill(),this.hpFrame.lineStyle(this.barSize.frameWidth,0,1),this.hpFrame.drawRect(this.barSize.x,this.barSize.y,this.barSize.width,this.barSize.height))}onDeath(){}onLeak(){}onDamaged(t,i){}rotate(t){}}
class Tower extends Entity{constructor(){super(0,0),this.cardType=cardType.TOWER,this.type=entityType.TOWER,this.tags=[],this.onMap=!1,this.placed=!1,this.rangeCollider=new PIXI.Sprite,this.rangeCollider.circular=!0,this.rangeCollider.radius=0,this.addChild(this.rangeCollider),this.rangeCircle=new PIXI.Graphics,this.buffContainer=new PIXI.Container,this.buffContainer.on("childAdded",this.sortBuffs.bind(this)),this.buffContainer.on("childRemoved",this.sortBuffs.bind(this)),this.infoContainer=new PIXI.Container,this.infoText=new PIXI.Text("text",{fontFamily:"Arial",fontSize:20,fill:0}),this.infoContainer.addChild(this.infoText),this.layerOffset=100,this.layer+=this.layerOffset,this.buffs=[],this.buffed=!1,this.bulletBuffs=[],this.onHitBuffs=[],this.towerEffects=[],this.clicked=!1,this.entered=!1}update(){this.dmg=this.baseDmg,this.attackSpeed=this.baseAS,this.range=this.baseRange,this.cooldown=this.baseCooldown,this.TC=this.baseTC,this.flatPen=0,this.percentagePen=0,this.bulletBuffs=[],this.onHitBuffs=[];for(let e=this.buffs.length-1;0<=e;e--){var t=this.buffs[e];this.placed&&gameScreen.levelStarted&&t.tags.includes(buffTags.TIMED)&&(t.duration-=deltaTime,t.duration<=0)?this.removeBuff(t):(t.effect(this),t.updateBuffIcon())}this.attackSpeed*=Math.min(player.maxTC/gameScreen.currentTC,1),this.cooldown/=Math.min(player.maxTC/gameScreen.currentTC,1),this.attackSpeed=Math.round(100*this.attackSpeed)/100,this.cooldown=Math.round(this.cooldown),this.rangeCollider.radius=this.range,this.buffed=0!=this.buffs.length,this.towerEffects.forEach(e=>e()),this.tags.includes(towerTags.ON_COOLDOWN)&&this.updateCD(),this.entered&&(this.rangeCircle.clear(),this.rangeCircle.lineStyle(4,8421504,.5),this.rangeCircle.beginFill(16777215,0),this.rangeCircle.drawCircle(0,0,this.range),this.rangeCircle.endFill())}updateCD(){this.placed&&gameScreen.levelStarted?this.cdClock<this.cooldown?this.cdClock+=deltaTime:(this.onCooldown(),this.cdClock=0):this.cdClock=0}onCooldown(){}onAttack(e){}onHit(t){this.onHitBuffs.forEach(e=>{e(t)})}onKill(e){}enterMap(e){this.x=e.x,this.y=e.y,this.rangeCircle.clear(),this.rangeCircle.lineStyle(4,8421504,.5),this.rangeCircle.beginFill(16777215,.2),this.rangeCircle.drawCircle(0,0,this.range),this.rangeCircle.endFill();e=this.canPlace(e);this.rangeCircle.tint=e?11184810:16744576,this.onMap=!0,this.addChildAt(this.rangeCircle,0),this.addToStage()}hoverMap(e){this.onMap&&(this.x=e.x,this.y=e.y,e=this.canPlace(e),this.rangeCircle.tint=e?11184810:16744576)}leaveMap(){this.removeChild(this.rangeCircle),this.remove(),this.onMap=!1}clickMap(e){return!!this.canPlace(e)&&(this.x=e.x,this.y=e.y,this.removeChild(this.rangeCircle),this.placed=!0,this.layer-=this.layerOffset,this.texture.interactive=!0,this.texture.on("mouseover",this.enter.bind(this)),this.texture.on("mouseout",this.leave.bind(this)),this.texture.on("click",this.click.bind(this)),this.enter(),this.click(),events.invoke("onTowerPlaced",this),!0)}canPlace(e){var t=gameScreen.entityContainer.children.filter(e=>e.type==entityType.TOWER&&e!=this).map(e=>e.texture);return!collider.hit(this.texture,t,!1,!1,!0)&&!gameScreen.map.collide(this.texture)}enter(){this.clicked||(this.addChildAt(this.rangeCircle,0),this.entered=!0)}leave(){this.clicked||(this.removeChild(this.rangeCircle),this.entered=!1)}click(){this.clicked||(this.clicked=!0,gameScreen.ui.showTowerInfo(this))}setTC(e){this.baseTC=e,this.TC=e}setDMG(e){this.baseDmg=e,this.dmg=e}setAS(e){this.baseAS=e,this.attackSpeed=e}setRange(e){this.baseRange=e,this.range=e,this.rangeCollider.radius=e}setMissileSpeed(e){this.baseMissileSpeed=e,this.missileSpeed=e}setCD(e){this.baseCooldown=e,this.cooldown=e}getDPS(){return Math.round(this.dmg*this.attackSpeed*100)/100}addBuff(t){if(t.tags.includes(buffTags.UNIQUE)){var e=this.buffs.find(e=>e.uniqueTag==t.uniqueTag);if(null!=e)return void(e.tags.includes(buffTags.CONCAT_DURATION)?(e.duration+=t.duration,e.baseDuration+=t.baseDuration):e.tags.includes(buffTags.REFRESH_DURATION)?(e.duration=t.duration,e.baseDuration=t.baseDuration):e.tags.includes(buffTags.STACKS)?e.stacks++:e.tags.includes(buffTags.CHARGES)&&(e.charges+=t.charges))}t.onApply(this),this.buffs.push(t),this.buffContainer.addChild(t.iconContainer)}removeBuff(e){e.onRemove(this),this.buffs.splice(this.buffs.indexOf(e),1),this.buffContainer.removeChild(e.iconContainer)}sortBuffs(){for(let e=0;e<this.buffs.length;e++){var t=this.buffs[e];t.iconContainer.x=e%4*40,t.iconContainer.y=40*Math.floor(e/4)}}}const towerTags={BULLET:"Tower shots spawn bullets",DAMAGE:"Tower deals damage to enemies",LIGHTNING:"This tower deals lightning damage",DEPLOYMENT:"Tower activates an effect upon deployment",CRIPPLE:"Tower reduces at least one stat",STAT_SUPPORT:"Tower increases at least one stat",AOE:"Tower has a round Aoe effect",DOT:"Tower has a Dot effect",CARD_GENERATOR:"Tower shuffles cards into your hand, draw or discard pile",LIFETIME:"Tower has a lifetime counter, that reduces by 1 per clear phase",ON_ATTACK:"Tower activates an effect upon commencing an attack",ON_HIT:"Tower activates an effect upon hitting an enemy",ON_KILL:"Tower activates an effect upon killing an enemy",ON_COOLDOWN:"Tower has an effect that activates every X seconds",MULTI_SHOT:"Tower can attack multiple targets simultaneously"};
class DamageTower extends Tower{constructor(){super(),this.tags.push(towerTags.DAMAGE),this.buttonContainer=new PIXI.Container,this.targetFirst=new Button("First",0,0,80,40,this.clickFirst.bind(this),16),this.targetLast=new Button("Last",0,50,80,40,this.clickLast.bind(this),16),this.targetStrong=new Button("Strong",0,100,80,40,this.clickStrong.bind(this),16),this.targetWeak=new Button("Weak",0,150,80,40,this.clickWeak.bind(this),16),this.buttonContainer.addChild(this.targetFirst),this.buttonContainer.addChild(this.targetLast),this.buttonContainer.addChild(this.targetStrong),this.buttonContainer.addChild(this.targetWeak),this.clickFirst(),this.shootCD=1e3/this.attackSpeed,this.totalDamageDealt=0}update(){var t;super.update(),this.placed&&gameScreen.levelStarted?this.shootCD<1e3/this.attackSpeed?this.shootCD+=deltaTime:(t=this.getMonsterInRange(),0<(t=this.attackTargets(t)).length&&(this.shootCD=0,t.forEach(t=>this.onAttack(t)))):this.shootCD=1e3/this.attackSpeed}attackTargets(t){return[]}getMonsterInRange(){var e=gameScreen.entityContainer.children.filter(t=>t.type==entityType.MONSTER&&!t.immune).sort((t,e)=>e.distTraveled-t.distTraveled),a=[];for(let t=0;t<e.length;t++)collider.hit(this.rangeCollider,e[t].texture,!1,!1,!0)&&a.push(e[t]);switch(this.targetOption){case targetOptions.FIRST:return a;case targetOptions.LAST:return a.reverse();case targetOptions.STRONG:return a.sort((t,e)=>e.hp-t.hp);case targetOptions.WEAK:return a.sort((t,e)=>t.hp-e.hp);case targetOptions.RANDOM:return shuffle(a)}}getVector(t){var e=new Object,t=(e.vx=t.texture.gx+t.texture.width/2-t.texture.xAnchorOffset-(this.rangeCollider.gx+this.rangeCollider.width/2-this.rangeCollider.xAnchorOffset),e.vy=t.texture.gy+t.texture.width/2-t.texture.yAnchorOffset-(this.rangeCollider.gy+this.rangeCollider.width/2-this.rangeCollider.yAnchorOffset),Math.sqrt(e.vx*e.vx+e.vy*e.vy));return e.vx/=t,e.vy/=t,e.mag=t,e}createBullet(t,e,a,i,s,r,n,h){let g=new Bullet(t,e,a,i,s,r,n,h,this);this.bulletBuffs.forEach(t=>t(g)),g.addToStage()}createLightningStrike(t,e,a,i,s){new LightningStrike(t,e,a,i,s,this).addToStage()}clickFirst(){this.targetOption=targetOptions.FIRST,this.targetFirst.disable(),this.targetLast.enable(),this.targetStrong.enable(),this.targetWeak.enable()}clickLast(){this.targetOption=targetOptions.LAST,this.targetFirst.enable(),this.targetLast.disable(),this.targetStrong.enable(),this.targetWeak.enable()}clickStrong(){this.targetOption=targetOptions.STRONG,this.targetFirst.enable(),this.targetLast.enable(),this.targetStrong.disable(),this.targetWeak.enable()}clickWeak(){this.targetOption=targetOptions.WEAK,this.targetFirst.enable(),this.targetLast.enable(),this.targetStrong.enable(),this.targetWeak.disable()}updateStats(){var t="TC: "+this.TC+"\nDamage: "+this.dmg+"\nAttack speed: "+this.attackSpeed+"\nRange: "+this.range+"\nDPS: "+this.getDPS()+"\nTotal damage dealt: "+Math.round(this.totalDamageDealt);this.infoText.text=t}countDamage(t){this.totalDamageDealt+=t}}const targetOptions={FIRST:"first",LAST:"last",STRONG:"strong",WEAK:"weak",RANDOM:"random"};
class Bullet extends Entity{constructor(e,t,i,s,r,h,a,n,l){super(e,t),this.type=entityType.PROJECTILE,this.layer=10,this.vx=i,this.vy=s,this.dmg=r,this.range=a,this.speed=h,this.srcTower=l,this.percentagePen=l.percentagePen,this.flatPen=l.flatPen,this.tags=[],this.texture=new PIXI.Graphics,this.texture.lineStyle(2,0,1),this.texture.beginFill(n),this.texture.drawCircle(0,0,5),this.texture.endFill(),this.addChild(this.texture),this.radius=5,this.distance=0,this.oldX=this.x,this.oldY=this.y}update(){this.distance>=this.range&&this.remove();var e=this.vx*this.speed*(deltaTime/1e3),t=this.vy*this.speed*(deltaTime/1e3),i=(this.oldX=this.x,this.oldY=this.y,this.x+=e,this.y+=t,this.distance+=Math.sqrt(e*e+t*t),gameScreen.entityContainer.children.filter(e=>e.type==entityType.MONSTER&&!e.immune).sort((e,t)=>t.distTraveled-e.distTraveled));let s=null;for(let e=0;e<i.length;e++){var r={x:i[e].texture.gx+i[e].texture.width/2-i[e].texture.xAnchorOffset,y:i[e].texture.gy+i[e].texture.width/2-i[e].texture.yAnchorOffset},h={x:this.x,y:this.y},a={x:this.oldX,y:this.oldY};if(distToSegment(r,h,a)<i[e].texture.radius+this.radius){s=i[e];break}}null!=s&&(e={amount:this.dmg,damageType:"NORMAL",percentagePen:this.percentagePen,flatPen:this.flatPen},s.recieveDamage(e,this.srcTower),this.srcTower.onHit(s),this.tags.includes(bulletTags.AOE)&&this.aoeExplosion(s),this.remove())}aoeExplosion(e){this.layer=-1;var e={x:e.texture.gx+e.texture.width/2-e.texture.xAnchorOffset,y:e.texture.gy+e.texture.width/2-e.texture.yAnchorOffset},t=(this.x=e.x,this.y=e.y,gameScreen.entityContainer.children.filter(e=>e.type==entityType.MONSTER&&!e.immune));let i=new PIXI.Sprite;i.circular=!0,i.radius=this.aoeRange,this.addChild(i),t.forEach(e=>{var t;collider.hit(i,e.texture,!1,!1,!0)&&(t={amount:this.dmg,damageType:"NORMAL"},e.recieveDamage(t,this.srcTower))}),gameScreen.explosiveRoundsEmitter.resetPositionTracking(),gameScreen.explosiveRoundsEmitter.updateOwnerPos(e.x,e.y),gameScreen.explosiveRoundsEmitter.emit=!0}}const bulletTags={AOE:"aoe"};
class LightningStrike extends Entity{constructor(t,e,i,s,h,a){super(t,e),this.layer=10,this.lifeTime=200;var r=Math.sqrt(dist2(this,i));let x=0;for(var n=[];x<=r;){var l=10+Math.random()*r/50;x+=l,n.push({x:x,y:10*Math.sin(x)})}n.splice(-1),n.push({x:r,y:0}),this.texture=new PIXI.Graphics,this.texture.lineStyle(5,h),this.texture.moveTo(0,0);for(let t=0;t<n.length;t++)this.texture.lineTo(n[t].x,n[t].y);t={x:i.x-this.x,y:i.y-this.y},e=Math.sqrt(t.x*t.x+t.y*t.y),t.x/=e,t.y/=e,h=Math.PI/2-Math.atan2(t.x,t.y),this.texture.rotation=h,this.addChild(this.texture),e={amount:s,damageType:"LIGHTNING"};i.recieveDamage(e,a),a.onHit(i)}update(){this.lifeTime-=deltaTime,this.lifeTime<=0&&this.remove()}}
class CentipedeBossHead extends Monster{static HEALTH=4e4;constructor(t,e){super(t,e,CentipedeBossHead.HEALTH),this.texture=new PIXI.Sprite(resources.centipedeBossHead2.texture),this.texture.width=128,this.texture.height=128,this.texture.circular=!0,this.texture.radius=64,this.layer=1,this.texture.anchor.set(.5),this.addChild(this.texture),this.speed=0,this.speedIncrease=15,this.immune=!0,this.ignore=!0,this.damageMultiplier=100,this.showBar=!1,this.barSize={x:-48,y:-84,width:96,height:16,frameWidth:2},this.hpText=new PIXI.Text(this.hp,{fontFamily:"Arial",fontSize:14,fill:"white",align:"center"}),this.hpText.anchor.set(.5,0),this.hpText.x=0,this.hpText.y=this.barSize.y,this.addChild(this.hpText),this.drawHPBar(),this.oldImmune=!0,this.next=null}onLeak(){gameScreen.endLevel()}onDeath(){gameScreen.winRun()}onDamaged(t,e){this.distTraveled-=5}update(){var e;super.update();for(e of gameScreen.entityContainer.children.filter(t=>t.type==entityType.MONSTER&&t instanceof CentipedeBossPart))if(null==e.prev){let t=this;for(;null!=t.next;)t=t.next;t.distTraveled-e.distTraveled<t.texture.radius+e.texture.radius&&((t.next=e).prev=t)}var t=this.getTailLength();this.speed=t*this.speedIncrease,this.immune=null!=this.next,this.oldImmune!=this.immune&&(this.showBar=!this.immune,this.immune?this.texture.texture=resources.centipedeBossHead1.texture:this.texture.texture=resources.centipedeBossHead2.texture,this.drawHPBar()),this.oldImmune=this.immune}rotate(t){this.texture.rotation=t+Math.PI}getTailLength(){let t=0,e=this;for(;null!=e.next;)t++,e=e.next;return t}drawHPBar(){super.drawHPBar(),this.hpText.text=Math.round(this.hp),this.hpText.visible=this.showBar}}class CentipedeBossPart extends Monster{static UNIT_COUNT=5;constructor(t,e,s){super(t,e,s),this.texture=new PIXI.Sprite(resources.centipedeBossPart.texture),this.texture.width=64,this.texture.height=64,this.texture.circular=!0,this.texture.radius=32,this.texture.anchor.set(.5),this.connector=new PIXI.Graphics,this.addChildAt(this.connector,0),this.addChild(this.texture),this.baseSpeed=150,this.speed=this.baseSpeed,this.damageMultiplier=.01,this.next=null,this.prev=null}onDeath(){super.onDeath(),null!=this.prev&&(this.prev.next=null,this.prev=null);let t=this;for(;null!=t.next;){var e=t.next;t.next=null,e.prev=null,t=e}}rotate(t){this.texture.rotation=t}update(){super.update(),null!=this.prev?this.speed=this.head.getTailLength()*this.head.speedIncrease:this.speed=this.baseSpeed,this.drawConnector()}drawConnector(){var t,e;this.connector.clear(),null!=this.prev&&(this.connector.lineStyle(2,0),this.connector.beginFill(4934655),this.connector.drawRect(0,-16,Math.sqrt(dist2(this,this.prev)),32),this.connector.endFill(),t={vx:this.prev.x-this.x,vy:this.prev.y-this.y},e=Math.sqrt(t.vx*t.vx+t.vy*t.vy),t.vx/=e,t.vy/=e,e=Math.atan2(t.vy,t.vx),this.connector.rotation=e)}}
class Snail extends Monster{static UNIT_COUNT=6;static HEALTH_MULTIPLIER=1.5;constructor(t,e,s){super(t,e,s*Snail.HEALTH_MULTIPLIER),this.texture=new PIXI.Sprite(resources.snail.texture),this.texture.width=64,this.texture.height=64,this.texture.circular=!0,this.texture.radius=32,this.texture.anchor.set(.5),this.addChild(this.texture),this.speed=50,this.damageMultiplier=.01,this.setArmor(150),this.transformed=!1,this.transformThreshold=.5,this.transformSpeed=2,this.transformTexture=resources.snail2.texture}update(){super.update(),!this.transformed&&this.hp<=this.maxHP*this.transformThreshold&&(this.transformed=!0,this.setArmor(0),this.speed*=this.transformSpeed,this.texture.texture=this.transformTexture)}rotate(t){this.texture.rotation=t}}
class Swarmer extends Monster{static SPAWN(e,r,s,i,t){var h=5+Math.floor(11*t()),a=[];for(let t=0;t<h;t++){var u=new this(e,r,Math.floor(s/h));u.spawnCD=i+50*t,a.push(u)}return a}static UNIT_COUNT=6;static HEALTH_MULTIPLIER=1.2;constructor(t,e,r){super(t,e,r*Swarmer.HEALTH_MULTIPLIER),this.texture=new PIXI.Sprite(resources.swarmer.texture),this.texture.width=64,this.texture.height=64,this.texture.circular=!0,this.texture.radius=32,this.texture.anchor.set(.5),this.addChild(this.texture),this.speed=250,this.damageMultiplier=.01,this.setArmor(30)}rotate(t){this.texture.rotation=t}}
class Walker extends Monster{static UNIT_COUNT=10;constructor(t,e,r){super(t,e,r),this.texture=new PIXI.Sprite(resources.walker.texture),this.texture.width=64,this.texture.height=64,this.texture.circular=!0,this.texture.radius=32,this.texture.anchor.set(.5),this.addChild(this.texture),this.speed=150,this.damageMultiplier=.01}}
class AmmoRefinery extends Tower{constructor(){super(),this.name="Ammo Refinery",this.cost=1,this.setTC(1),this.setRange(350),this.setCD(7e3),this.effect=.25,this.buffAmount=3,this.cdClock=0,this.buffedTurrets=[],this.appliedBuffs=[],this.tags.push(towerTags.STAT_SUPPORT),this.tags.push(towerTags.CARD_GENERATOR),this.tags.push(towerTags.ON_COOLDOWN),this.texture=new PIXI.Sprite,this.texture.circular=!0,this.texture.radius=32,this.addChild(this.texture),this.graphic=new PIXI.Graphics,this.graphic.lineStyle(2,0,1),this.graphic.beginFill(10066329),this.graphic.drawCircle(0,0,32),this.graphic.endFill(),this.graphic.beginFill(8454016),this.graphic.drawRect(-16,-16,32,32),this.graphic.endFill(),this.texture.addChild(this.graphic),this.cdArc=new PIXI.Graphics,this.cdArc.x=10,this.cdArc.y=50,this.infoContainer.addChild(this.cdArc)}update(){if(super.update(),this.placed){var e,s=this.getTowersInRange();for(let t=0;t<Math.min(3,s.length);t++)s[t]!=this.buffedTurrets[t]&&(null!=this.buffedTurrets[t]&&this.buffedTurrets[t].removeBuff(this.appliedBuffs[t]),e=new Buff("Better Ammo",(t,e)=>{e.dmg+=e.baseDmg*this.effect}),s[t].addBuff(e),this.buffedTurrets[t]=s[t],this.appliedBuffs[t]=e);this.texture.rotation+=Math.PI*(deltaTime/1e3)}}onCooldown(){gameScreen.cardToHand(new Card(new ExplosiveRounds))}remove(){for(let t=0;t<this.buffedTurrets.length;t++)this.buffedTurrets[t].removeBuff(this.appliedBuffs[t]);super.remove()}getTowersInRange(){var e=gameScreen.entityContainer.children.filter(t=>t.type==entityType.TOWER&&t.tags.includes(towerTags.BULLET)&&t.placed),s=[];for(let t=0;t<e.length;t++)collider.hit(this.rangeCollider,e[t].texture,!1,!1,!0)&&s.push(e[t]);return s.sort((t,e)=>{return Math.sqrt(sqr(t.x-this.x)+sqr(t.y-this.y))-Math.sqrt(sqr(e.x-this.x)+sqr(e.y-this.y))})}getCardText(){return"Range: "+this.range+"\nCooldown: "+this.cooldown/1e3+"s\n\nGives up to "+this.buffAmount+"\nbullet towers\nin range "+100*this.effect+"%\nbonus damage\n\nOn-Cooldown:\nAdd one copy of\nExplosive Rounds\nto your Hand"}updateStats(){var t="TC: "+this.TC+"\nRange: "+this.range+"\n\nGet one copy of\nExplosive Rounds\nevery "+this.cooldown/1e3+"s\n\nNext card: ";this.infoText.text=t;this.cdArc.clear(),this.cdArc.beginFill(0,1),this.cdArc.arc(110,125,16,-Math.PI/2,-Math.PI/2+2*Math.PI*this.cdClock/this.cooldown+.01,!0),this.cdArc.lineTo(110,125),this.cdArc.endFill()}}
class BaseTower extends DamageTower{constructor(){super(),this.name="Base Tower",this.cost=2,this.setTC(2),this.setDMG(50),this.setAS(2),this.setRange(200),this.setMissileSpeed(1e3),this.tags.push(towerTags.BULLET),this.texture=new PIXI.Sprite,this.texture.circular=!0,this.texture.radius=48,this.addChild(this.texture),this.graphic=new PIXI.Graphics,this.graphic.lineStyle(2,0,1),this.graphic.beginFill(10066329),this.graphic.drawCircle(0,0,32),this.graphic.endFill(),this.graphic.beginFill(9849600),this.graphic.drawRect(-8,-48,16,50),this.graphic.endFill(),this.texture.addChild(this.graphic),this.projectileColor=16711935}update(){super.update()}attackTargets(t){var e,i,s,h;return 0!=t.length?(e=this.getVector(t[0]),i=Math.PI/2+Math.atan2(e.vy,e.vx),this.texture.rotation=i,i=this.x+this.texture.radius*e.vx,s=this.y+this.texture.radius*e.vy,h=this.range-this.texture.radius,this.createBullet(i,s,e.vx,e.vy,this.dmg,this.missileSpeed,h,this.projectileColor),[t[0]]):[]}getCardText(){return"Damage: "+this.dmg+"\nRange: "+this.range+"\nAttack speed: "+this.attackSpeed+"\nDPS: "+this.getDPS()}}
class MinigunTower extends DamageTower{constructor(){super(),this.name="Minigun Tower",this.cost=3,this.setTC(4),this.setDMG(20),this.setAS(4),this.initialAS=this.baseAS,this.setRange(200),this.setMissileSpeed(1200),this.tags.push(towerTags.BULLET),this.texture=new PIXI.Sprite,this.texture.circular=!0,this.texture.radius=32,this.addChild(this.texture),this.graphic=new PIXI.Graphics,this.graphic.lineStyle(2,0,1),this.graphic.beginFill(10066329),this.graphic.drawCircle(0,0,24),this.graphic.endFill(),this.graphic.beginFill(170),this.graphic.drawRect(-4,-32,8,40),this.graphic.endFill(),this.texture.addChild(this.graphic),this.projectileColor=255,this.ASBuff=1,this.stacks=0,this.maxStacks=6,this.stackLoss=4,this.stackLossPassive=1,this.stackCD=500,this.stackClock=0,this.oldTarget=null}update(){this.baseAS=this.initialAS+this.stacks*this.ASBuff,super.update(),this.placed&&gameScreen.levelStarted||(this.stacks=0)}attackTargets(t){var s,i,a,e;return 0!=t.length?(this.oldTarget==t[0]?this.stacks=Math.min(this.maxStacks,this.stacks+1):this.stacks=Math.max(0,this.stacks-this.stackLoss),this.stackClock=0,this.oldTarget=t[0],s=this.getVector(t[0]),i=Math.PI/2+Math.atan2(s.vy,s.vx),this.texture.rotation=i,i=this.x+this.texture.radius*s.vx,a=this.y+this.texture.radius*s.vy,e=this.range-this.texture.radius,this.createBullet(i,a,s.vx,s.vy,this.dmg,this.missileSpeed,e,this.projectileColor),[t[0]]):(this.stackClock+=deltaTime,this.stackClock>=this.stackCD&&(this.stacks=Math.max(0,this.stacks-this.stackLossPassive),this.stackClock-=this.stackCD),[])}getCardText(){return"Damage: "+this.dmg+"\nAttack speed: "+this.attackSpeed+" - "+(this.attackSpeed+this.maxStacks*this.ASBuff)+"\n\nShooting the same\ntarget consecutively\ngrants a stack of\nBarrelSpeed up to "+this.maxStacks+".\nLose "+this.stackLoss+" stacks upon\nswitching targets.\nLose "+this.stackLossPassive+" stack each\n"+this.stackCD/1e3+"s of not shooting.\nBarrelSpeed: gain\n"+this.ASBuff+" attack speed."}updateStats(){super.updateStats();var t="\n\nBarrel Speed: "+this.stacks+" stacks";this.infoText.text+=t}}
class SniperNest extends DamageTower{constructor(){super(),this.name="Sniper Nest",this.cost=5,this.setTC(4),this.setDMG(400),this.setAS(.4),this.setRange(600),this.setMissileSpeed(3e3),this.penetrationBuff=.5;this.addBuff(new Buff("True shot",(t,e)=>{e.percentagePen+=this.penetrationBuff})),this.tags.push(towerTags.STAT_SUPPORT),this.tags.push(towerTags.BULLET),this.texture=new PIXI.Sprite(resources.sniperNest.texture),this.texture.width=128,this.texture.height=128,this.texture.anchor.set(.5),this.texture.circular=!0,this.texture.radius=64,this.addChild(this.texture),this.projectileColor=8421504}update(){super.update()}attackTargets(t){var e,s,i,r;return 0!=t.length?(e=this.getVector(t[0]),s=Math.PI/2+Math.atan2(e.vy,e.vx),this.texture.rotation=s,s=this.x+this.texture.radius*e.vx,i=this.y+this.texture.radius*e.vy,r=this.range-this.texture.radius,this.createBullet(s,i,e.vx,e.vy,this.dmg,this.missileSpeed,r,this.projectileColor),[t[0]]):[]}getCardText(){return"Damage: "+this.dmg+"\nRange: "+this.range+"\nAttack speed: "+this.attackSpeed+"\nDPS: "+this.getDPS()+"\n\nThis tower has "+100*this.penetrationBuff+" %\narmor penetration"}updateStats(){super.updateStats();var t="\nThis tower has "+100*this.penetrationBuff+"%\narmor penetration";this.infoText.text+=t}}
class TempestTower extends DamageTower{constructor(){super(),this.name="Tempest Tower",this.cost=2,this.setTC(2),this.setDMG(75),this.setAS(1.5),this.setRange(250),this.tags.push(towerTags.LIGHTNING),this.texture=new PIXI.Sprite,this.texture.circular=!0,this.texture.radius=48,this.buttonContainer=new PIXI.Container;var t=new Button("Random",0,0,80,40,()=>{},16);t.disable(),this.buttonContainer.addChild(t),this.targetOption=targetOptions.RANDOM,this.addChild(this.texture),this.graphic=new PIXI.Graphics,this.graphic.lineStyle(2,0,1),this.graphic.beginFill(10066329),this.graphic.drawCircle(0,0,48),this.graphic.endFill(),this.graphic.beginFill(255),this.graphic.drawRect(-4,-48,8,20),this.graphic.drawRect(-48,-4,20,8),this.graphic.drawRect(-4,28,8,20),this.graphic.drawRect(28,-4,20,8),this.graphic.endFill(),this.texture.addChild(this.graphic)}update(){super.update()}attackTargets(t){return 0!=t.length?(this.createLightningStrike(this.x,this.y,t[0],this.dmg,65535),[t[0]]):[]}getCardText(){return"Damage: "+this.dmg+"\nRange: "+this.range+"\nAttack speed: "+this.attackSpeed+"\nDPS: "+this.getDPS()+"\n\nThis tower only has\nthe random target\noption"}}
class Spell extends Entity{constructor(){super(0,0),this.cardType=cardType.SPELL,this.entityType=entityType.SPELL_EFFECT,this.tags=[],this.onMap=!1,this.rangeCircle=new PIXI.Graphics,this.layer=1e3}enterMap(e){this.tags.includes(spellTags.AOE)&&(this.x=e.x,this.y=e.y,this.rangeCircle.clear(),this.rangeCircle.lineStyle(4,16732240,1),this.rangeCircle.beginFill(11184810,.4),this.rangeCircle.drawCircle(0,0,this.radius),this.rangeCircle.endFill(),this.onMap=!0,this.addChildAt(this.rangeCircle,0),this.addToStage())}hoverMap(t){if(this.tags.includes(spellTags.AOE)){if(!this.onMap)return;this.x=t.x,this.y=t.y}this.tags.includes(spellTags.TARGET_TOWER)&&gameScreen.entityContainer.children.forEach(e=>{e.type==entityType.TOWER&&(collider.hitTestPoint(t,e.texture)?e.entered||e.enter():e.entered&&e.leave())})}leaveMap(){this.removeChild(this.rangeCircle),this.remove(),this.onMap=!1}clickMap(i){if(this.tags.includes(spellTags.TARGET_TOWER)){var e,s=gameScreen.entityContainer.children.filter(e=>e.type==entityType.TOWER);let t=null;for(let e=0;e<s.length;e++)if(collider.hitTestPoint(i,s[e].texture)){t=s[e];break}return null!=t?(e=this.clickTarget(t),t.enter(),t.click(),e):!1}return this.tags.includes(spellTags.AOE)?(this.removeChild(this.rangeCircle),this.hitTargets(i),!0):!!this.tags.includes(spellTags.GLOBAL)&&(this.useSpell(),!0)}getTargets(e){return this.tags.includes(spellTags.TARGET_TOWER)?e.filter(e=>e.type==entityType.TOWER):[]}countDamage(e){console.log(e)}}const spellTags={DAMAGE:"Damage",BUFF:"Buff",TIMED:"Timed",PERMANENT:"Permanent",INSTANT:"Instant",DELAYED:"Delayed",AOE:"AOE",DOT:"DOT",CRIPPLE:"Cripple",TARGET_TOWER:"Target tower",TARGET_MONSTER:"Target tower",DEPLETE:"Deplete",CHARGES:"Charges"};
class Card extends PIXI.Container{constructor(t){switch(super(),this.cardObject=t,this.cardWidth=180,this.cardHeight=250,t.cardType){case cardType.TOWER:this.fill=11206570;break;case cardType.SPELL:this.fill=16755455;break;case cardType.CURSE:this.fill=16755370;break;default:this.fill=16777215}this.name=this.cardObject.name,this.text=this.cardObject.getCardText(),this.type=this.cardObject.cardType,this.cost=this.cardObject.cost,this.marketPrice=20,this.cardBG=new PIXI.Graphics,this.cardBG.beginFill(this.fill),this.cardBG.drawRect(0,0,this.cardWidth,this.cardHeight),this.cardBG.endFill(),this.addChild(this.cardBG);t=new PIXI.Graphics;t.beginFill(0),t.drawRect(this.cardWidth-40,0,40,this.height),t.endFill(),this.addChild(t),this.cardName=new PIXI.Text(this.name,{fontFamily:"Arial",fontSize:20,fontWeight:"bold",fill:16777215}),this.cardName.x=this.cardWidth-5,this.cardName.y=40,this.cardName.rotation=Math.PI/2,this.addChild(this.cardName),this.cardCost=new PIXI.Text(this.cost,{fontFamily:"Arial",fontSize:24,fontWeight:"bold",fill:16766720}),this.cardCost.anchor.set(1,0),this.cardCost.x=this.cardWidth-5,this.cardCost.y=5,this.addChild(this.cardCost),this.type==cardType.TOWER&&(this.cardTC=new PIXI.Text(this.cardObject.TC,{fontFamily:"Arial",fontSize:24,fontWeight:"bold",fill:16711680}),this.cardTC.anchor.set(1),this.cardTC.x=this.cardWidth-5,this.cardTC.y=this.cardHeight-5,this.addChild(this.cardTC)),this.cardText=new PIXI.Text(this.text,{fontFamily:"Arial",fontSize:14,fill:0}),this.cardText.x=10,this.cardText.y=10,this.addChild(this.cardText),this.typeText=new PIXI.Text(this.type,{fontFamily:"Arial",fontSize:12,fill:0}),this.typeText.anchor.set(0,1),this.typeText.x=5,this.typeText.y=this.cardHeight-5,this.addChild(this.typeText),this.cardFrame=new PIXI.Graphics,this.cardFrame.lineStyle(5,16777215,1),this.cardFrame.beginFill(16777215,0),this.cardFrame.drawRect(0,0,this.cardWidth,this.cardHeight),this.cardFrame.endFill(),this.cardFrame.tint=0,this.addChild(this.cardFrame),this.interactive=!0,this.buttonMode=!0,this.addListeners(),this.persistentKey=!1}addListeners(){this.on("click",this.clickCard.bind(this)),this.on("mouseover",this.enter.bind(this)),this.on("mouseout",this.leave.bind(this))}update(){this.cardCost.text=this.cost}clickCard(){gameScreen.selectCard(this)}enter(){gameScreen.ui.bringCardToFront(this)}leave(){gameScreen.ui.bringCardToFront(gameScreen.selectedCard)}select(){return!!this.isPlayable()&&(this.cardFrame.tint=16711680,gameScreen.entityContainer.interactiveChildren=!1,gameScreen.entityContainer.children.forEach(t=>{t.entered&&t.leave()}),!0)}deselect(){this.cardFrame.tint=0,gameScreen.entityContainer.interactiveChildren=!0}hoverMap(t){this.cardObject.hoverMap(t)}enterMap(t){this.cardObject.enterMap(t)}leaveMap(){this.cardObject.leaveMap()}clickMap(t){this.cardObject.clickMap(t)&&(gameScreen.energy-=this.cost,this.type==cardType.TOWER||this.cardObject.tags.includes(spellTags.DEPLETE)?gameScreen.destroyCard(this):gameScreen.discardCard(this),events.invoke("onCardPlayed",this))}isPlayable(t){if(null==t&&(t=gameScreen),this.cost>t.energy)return!1;if(this.type!=cardType.TOWER&&(this.type==cardType.SPELL&&this.cardObject.tags.includes(spellTags.TARGET_TOWER)))return 0!=this.cardObject.getTargets(t.entityContainer.children).length;return!0}}const cardType={SPELL:"Spell",TOWER:"Tower",CURSE:"Curse"};
class Adjust extends Spell{constructor(){super(),this.name="Adjust",this.cost=0,this.effect=.1,this.tags.push(spellTags.PERMANET),this.tags.push(spellTags.BUFF),this.tags.push(spellTags.TARGET_TOWER)}getCardText(){return"Gives a tower\n"+100*this.effect+"% bonus\nrange"}clickTarget(s){var e=new Buff(this.name,(s,e)=>{e.range+=s.stacks*(e.baseRange*this.effect)});return e.makeUnique(this.name),e.setStacks(1),s.addBuff(e),!0}}
class BoxOfHollowPoints extends Spell{constructor(){super(),this.name="Box of Hollow Points",this.cost=1,this.effect=100,this.charges=20,this.tags.push(spellTags.PERMANET),this.tags.push(spellTags.TARGET_TOWER),this.tags.push(spellTags.CHARGES)}getCardText(){return"Gives a tower\n"+this.effect+" on-hit damage\nfor "+this.charges+" shots."}clickTarget(e){if(!e.tags.includes(towerTags.BULLET))return!1;let a=(e,s,t)=>{var a={amount:this.effect,damageType:"NORMAL"};e.recieveDamage(a,t),s.charges--,s.charges<=0&&t.removeBuff(s)};var s="Hollow Point Rounds",t=new Buff(s,(s,t)=>{t.onHitBuffs.push(e=>{a(e,s,t)})});return t.makeUnique(s),t.setCharges(this.charges),e.addBuff(t),!0}getTargets(e){return e.filter(e=>e.type==entityType.TOWER).filter(e=>e.tags.includes(towerTags.BULLET))}}
class CannonBlast extends Spell{constructor(){super(),this.name="Cannon-Blast",this.cost=1,this.dmg=200,this.radius=150,this.tags.push(spellTags.AOE),this.tags.push(spellTags.INSTANT),this.tags.push(spellTags.DAMAGE),this.targets=null}getCardText(){return"AOE Spell\n\nDamage: "+this.dmg+"\nRadius: "+this.radius}update(){if(null!=this.targets){this.targets.forEach(t=>{var e;t.type==entityType.MONSTER&&(e={amount:this.dmg,damageType:"NORMAL"},t.recieveDamage(e,this))}),this.targets=null,this.remove();try{gameScreen.cannonBlastEmitter.resetPositionTracking(),gameScreen.cannonBlastEmitter.updateOwnerPos(this.x,this.y),gameScreen.cannonBlastEmitter.emit=!0}catch{}}}hitTargets(t){this.targets=[];var e=gameScreen.entityContainer.children.filter(t=>t.type==entityType.MONSTER);this.x=t.x,this.y=t.y;let s=new PIXI.Sprite;s.circular=!0,s.radius=this.radius,this.addChild(s),e.forEach(t=>{collider.hit(s,t.texture,!1,!1,!0)&&this.targets.push(t)}),this.removeChild(s)}}
class DoubleBarrel extends Spell{constructor(){super(),this.name="Double Barrel",this.cost=2,this.effect=1,this.cripple=1,this.tags.push(spellTags.PERMANET),this.tags.push(spellTags.BUFF),this.tags.push(spellTags.TARGET_TOWER),this.tags.push(spellTags.CRIPPLE)}getCardText(){return"Gives a tower\n"+100*this.effect+"% bonus\nattack speed\nbut the tower uses\n"+100*this.cripple+"% more TCs"}clickTarget(e){var s;return!!e.tags.includes(towerTags.BULLET)&&((s=new Buff(this.name,(e,s)=>{s.attackSpeed+=e.stacks*(s.baseAS*this.effect),s.TC+=e.stacks*(s.baseTC*this.cripple)})).makeUnique(this.name),s.setStacks(1),e.addBuff(s),!0)}getTargets(e){return e.filter(e=>e.type==entityType.TOWER).filter(e=>e.tags.includes(towerTags.BULLET))}}
class ExplosiveRounds extends Spell{constructor(){super(),this.name="Explosive Rounds",this.cost=1,this.duration=3e3,this.effect=.5,this.effectRange=100,this.tags.push(spellTags.TIMED),this.tags.push(spellTags.BUFF),this.tags.push(spellTags.TARGET_TOWER),this.tags.push(spellTags.DEPLETE)}getCardText(){return"Tower shots deal\n"+100*this.effect+"% of the damage\nas AOE damage in\na 100 radius\nfor "+this.duration/1e3+"s"}clickTarget(s){if(!s.tags.includes(towerTags.BULLET))return!1;let t=s=>{s.tags.push(bulletTags.AOE),s.aoeRange=this.effectRange,s.aoeDamage=s.dmg*this.effect,s.dmg*=1-this.effect};var e="Explosive Rounds",a=new Buff(e,(s,e)=>{e.bulletBuffs.push(t)});return a.setDuration(this.duration),a.makeUnique(e),a.tags.push(buffTags.CONCAT_DURATION),s.addBuff(a),!0}getTargets(s){return s.filter(s=>s.type==entityType.TOWER).filter(s=>s.tags.includes(towerTags.BULLET))}}
class LeadStorm extends Spell{constructor(){super(),this.name="Lead Storm",this.cost=3,this.duration=1e4,this.tags.push(spellTags.TIMED),this.tags.push(spellTags.BUFF),this.tags.push(spellTags.GLOBAL)}getCardText(){return"ALL bullet towers\nshoot three times\nas many bullets\nin an arc around\ntheir target for "+this.duration/1e3+"s"}useSpell(){let s=(c,d)=>{c.createBullet=d.createBullet,d.createBullet=(e,t,a,s,r,l,u,n)=>{c.createBullet.call(d,e,t,a,s,r,l,u,n);var s=Math.atan2(s,a),a=Math.cos(s+.15),i=Math.sin(s+.15),h=Math.cos(s-.15),s=Math.sin(s-.15);c.createBullet.call(d,e,t,a,i,r,l,u,n),c.createBullet.call(d,e,t,h,s,r,l,u,n)}},r=(e,t)=>{t.createBullet=e.createBullet};var e=new Buff(this.name,(a,e)=>{e.entityContainer.children.filter(e=>e.type==entityType.TOWER&&e.tags.includes(towerTags.BULLET)&&e.placed).forEach(e=>{var t;a.buffedTurrets.includes(e)||((t=new Buff(this.name,(e,t)=>{},s,r)).setDuration(this.duration),t.duration=a.duration,e.addBuff(t),a.buffedTurrets.push(e),a.appliedBuffs.push(t))})},(e,t)=>{e.buffedTurrets=[],e.appliedBuffs=[]},(e,t)=>{});e.setDuration(this.duration),e.makeUnique(this.name),gameScreen.addBuff(e)}}
class Overcharge extends Spell{constructor(){super(),this.name="Overcharge",this.cost=1,this.duration=3e3,this.effect=1,this.tags.push(spellTags.TIMED),this.tags.push(spellTags.BUFF),this.tags.push(spellTags.TARGET_TOWER)}getCardText(){return"Gives a tower\n"+100*this.effect+"% bonus\nattack damage\nfor "+this.duration/1e3+" seconds"}clickTarget(e){var t;return!!e.tags.includes(towerTags.DAMAGE)&&((t=new Buff("Overcharge",(e,t)=>{t.dmg+=t.baseDmg*this.effect})).setDuration(this.duration),e.addBuff(t),!0)}getTargets(e){return e.filter(e=>e.type==entityType.TOWER).filter(e=>e.tags.includes(towerTags.DAMAGE))}}
class Refine extends Spell{constructor(){super(),this.name="Refine",this.cost=1,this.effect=.1,this.tags.push(spellTags.PERMANET),this.tags.push(spellTags.BUFF),this.tags.push(spellTags.TARGET_TOWER)}getCardText(){return"Gives a tower\n"+100*this.effect+"% bonus\nattack damage"}clickTarget(e){var t;return!!e.tags.includes(towerTags.DAMAGE)&&((t=new Buff(this.name,(e,t)=>{t.dmg+=e.stacks*(t.baseDmg*this.effect)})).makeUnique(this.name),t.setStacks(1),e.addBuff(t),!0)}getTargets(e){return e.filter(e=>e.type==entityType.TOWER).filter(e=>e.tags.includes(towerTags.DAMAGE))}}
class Accessories extends PIXI.Container{static CREATE(){return new this}constructor(i,t,e){super(),this.name=i,this.description=t,this.upgradeDesc=e,this.upgraded=!1;var l=new PIXI.Graphics,o=(l.beginFill(15844367),l.lineStyle(4,0,1),l.drawPolygon([80,0,160,55,130,150,30,150,0,55]),l.endFill(),i.split(" "));let s="";o.forEach(i=>s+=i.charAt(0));o=new PIXI.Text(s,{fontFamily:"Arial",fontSize:36,fill:"white",stroke:"black",lineJoin:"bevel",strokeThickness:4}),o.x=80,o.y=75,o.anchor.set(.5),this.addChild(l),this.addChild(o),this.interactive=!0,this.on("mouseover",this.enter.bind(this)),this.on("mouseout",this.leave.bind(this)),this.on("pointermove",this.move.bind(this)),this.tooltip=new PIXI.Container,l=new PIXI.Graphics,l.beginFill(3158144),l.drawRoundedRect(0,0,200,300,10),l.endFill(),l.beginFill(3178624),l.drawRoundedRect(0,0,200,40,10),l.endFill(),l.alpha=.8,this.tooltip.addChild(l),o=new PIXI.Text(i,{fontFamily:"Arial",fontSize:48,fill:"white",stroke:"black",lineJoin:"bevel",strokeThickness:6}),o.x=10,o.y=20,o.anchor.set(0,.5),l=o.width/o.height,o.width=l<4.5?40*l:180,o.height=4.5<l?180/l:40,i=new PIXI.Text(t,{fontFamily:"Arial",fontSize:16,fill:"white",stroke:"black",lineJoin:"bevel",strokeThickness:2}),i.x=10,i.y=50,i.style.wordWrap=!0,i.style.wordWrapWidth=180,l=new PIXI.Text("Upgrade: "+e,{fontFamily:"Arial",fontSize:16,fill:"white",stroke:"black",lineJoin:"bevel",strokeThickness:2});l.x=10,l.y=70+i.height,l.style.wordWrap=!0,l.style.wordWrapWidth=180,this.tooltip.addChild(o),this.tooltip.addChild(i),this.tooltip.addChild(l)}enter(i){i=i.data.global;this.tooltip.x=i.x,this.tooltip.y=i.y,app.stage.addChild(this.tooltip)}leave(){app.stage.removeChild(this.tooltip)}move(i){i=i.data.global;this.tooltip.x=i.x,this.tooltip.y=i.y}equip(){player.accessories.push(this),this.leave()}upgrade(){this.upgraded=!0}countDamage(i){}}
class Accumulators extends Accessories{constructor(){super("Accumulators","Retain up to 2 Energy per turn during Clear Phase.","Retain all Energy"),this.retainedEnergy=0,this.maxEnergy=2}onClear(){this.retainedEnergy=Math.min(this.maxEnergy,gameScreen.energy)}onDrawPhase(e){e.energy+=this.retainedEnergy,this.retainedEnergy=0}equip(){super.equip(),events.addListener("onClear",this.onClear.bind(this)),events.addListener("onDrawPhase",this.onDrawPhase.bind(this))}upgrade(){super.upgrade(),this.maxEnergy=Number.MAX_SAFE_INTEGER}}
class BetterPowder extends Accessories{constructor(){super("Better Powder","Bullet Towers deal 2 damage on hit.","4 damage"),this.damageBuff=2,this.upgradedBuff=4}upgrade(){super.upgrade(),this.damageBuff=this.upgradedBuff}equip(){super.equip(),events.addListener("onTowerPlaced",this.onTowerPlaced.bind(this))}onTowerPlaced(e){if(e.tags.includes(towerTags.BULLET)){let d=(e,a)=>{var d={amount:this.damageBuff,damageType:"NORMAL"};e.recieveDamage(d,a)};var a=new Buff("Better Powder",(e,a)=>{a.onHitBuffs.push(e=>{d(e,a)})});e.addBuff(a)}}}
class EmergencyReserve extends Accessories{constructor(){super("Emergency Reserve","If you took damage last turn, draw 1 additional card at the start of your turn.","Also draw 1 card the first time you take damage each turn."),this.tookDamage=!1}onDrawPhase(e){this.tookDamage&&(e.drawCard(),this.tookDamage=!1)}onDamage(){this.upgraded&&!this.tookDamage&&gameScreen.drawCard(),this.tookDamage=!0}onLevelEnd(){this.tookDamage=!1}equip(){super.equip(),events.addListener("onDrawPhase",this.onDrawPhase.bind(this)),events.addListener("onPlayerDamage",this.onDamage.bind(this)),events.addListener("onLevelEnd",this.onLevelEnd.bind(this))}}
class HardenedPolish extends Accessories{constructor(){super("Hardened Polish","Gain 1 Max Health after each combat.","Gain 2 Max Health"),this.hpIncrease=1,this.upgradedIncrease=2}onLevelEnd(){player.maxHP+=this.hpIncrease,player.hp+=this.hpIncrease}equip(){super.equip(),events.addListener("onLevelEnd",this.onLevelEnd.bind(this))}upgrade(){super.upgrade(),this.hpIncrease=this.upgradedIncrease}}
class PersistentStorage extends Accessories{constructor(){super("Persistent Storage","Retain a random card during Clear Phase.","Select a card")}onClear(){var e=gameScreen.hand.filter(e=>!e.cardObject.tags.includes(spellTags.DEPLETE)),e=e.splice(Math.floor(player.deckRand()*e.length),1)[0];null!=e&&(e.persistentKey=!0)}equip(){super.equip(),events.addListener("onClear",this.onClear.bind(this))}}
class PrechargedAttackSystems extends Accessories{constructor(){super("Precharged Attack-Systems","The first Damage Spell played each turn costs one less energy (not less than 0).","First two Spells"),this.amount=1,this.upgradeAmount=2;let e=(e,s)=>{s.hand.forEach(e=>{e.type==cardType.SPELL&&e.cardObject.tags.includes(spellTags.DAMAGE)&&(e.cost=Math.max(0,e.cost-1))})},a=(e,s,t)=>{e.type==cardType.SPELL&&e.cardObject.tags.includes(spellTags.DAMAGE)&&(s.charges--,s.charges<=0)&&t.removeBuff(s)},s=(s,t)=>{this.fn=e=>a(e,s,t),events.addListener("onCardPlayed",this.fn)},t=(e,s)=>{events.removeListener("onCardPlayed",this.fn)};this.createBuff=()=>{return new Buff("Precharged Attack",e,s,t)}}onClear(){gameScreen.removeBuff(this.buff)}onDrawPhase(e){this.buff=this.createBuff(),this.buff.setCharges(this.amount),e.addBuff(this.buff)}equip(){super.equip(),events.addListener("onClear",this.onClear.bind(this)),events.addListener("onLevelEnd",this.onClear.bind(this)),events.addListener("onDrawPhase",this.onDrawPhase.bind(this))}upgrade(){super.upgrade(),this.amount=this.upgradeAmount}}
class ProtectiveCharges extends Accessories{constructor(){super("Protective Charges","The first time each combat your ship takes damage it emits a shockwave sweeping over the map and dealing 200 damage to every enemy hit.","400 damage"),this.tookDamage=!1,this.damage=200,this.upgradedDamage=400}onDamage(){this.tookDamage||(new ProtCharge(this.damage,this).addToStage(),this.tookDamage=!0)}onLevelEnd(){this.tookDamage=!1}equip(){super.equip(),events.addListener("onPlayerDamage",this.onDamage.bind(this)),events.addListener("onLevelEnd",this.onLevelEnd.bind(this))}upgrade(){super.upgrade(),this.damage=this.upgradedDamage}}class ProtCharge extends Entity{constructor(e,i){super(gameScreen.map.ship.x,gameScreen.map.ship.y),this.damage=e,this.origin=i,this.collidedEnemies=[],this.radius=0,this.speed=400,this.graphics=new PIXI.Graphics,this.addChild(this.graphics),this.rangeCollider=new PIXI.Sprite,this.rangeCollider.circular=!0,this.rangeCollider.radius=0,this.addChild(this.rangeCollider)}update(){this.radius+=this.speed*deltaTime/1e3,this.graphics.clear(),this.graphics.lineStyle(10,16732240,1),this.graphics.drawCircle(0,0,this.radius),this.rangeCollider.radius=this.radius;var e=gameScreen.entityContainer.children.filter(e=>e.type==entityType.MONSTER);let i=[],a={amount:this.damage,damageType:"NORMAL"};e.forEach(e=>{collider.hit(this.rangeCollider,e.texture,!1,!1,!0)&&i.push(e)}),i.forEach(e=>{this.collidedEnemies.includes(e)||(this.collidedEnemies.push(e),e.recieveDamage(a,this.origin))}),this.radius>=width&&this.remove()}}
class Repairbot extends Accessories{constructor(){super("Repairbot","At the end of each wave, during which you have not taken damage, regain 1 health.","Regain 2 health"),this.tookDamage=!1,this.repairAmount=1,this.upgradeAmount=2}onClear(){this.tookDamage?this.tookDamage=!1:player.heal(this.repairAmount)}onDamage(){this.tookDamage=!0}equip(){super.equip(),events.addListener("onClear",this.onClear.bind(this)),events.addListener("onPlayerDamage",this.onDamage.bind(this)),events.addListener("onLevelEnd",this.onClear.bind(this))}upgrade(){super.upgrade(),this.repairAmount=this.upgradeAmount}}
class StarterPack extends Accessories{constructor(){super("Starter Pack","The first Base Tower you place each combat costs 0 energy.","Also uses no TCs"),this.amount=1;let e=(e,t)=>{t.hand.forEach(e=>{"Base Tower"==e.name&&(e.cost=0)})},n=(e,t,s)=>{"Base Tower"==e.name&&s.removeBuff(t)},t=(t,s)=>{this.fn=e=>n(e,t,s),events.addListener("onCardPlayed",this.fn)},s=(e,t)=>{events.removeListener("onCardPlayed",this.fn)};this.createBuff=()=>{return new Buff("Cheap Base Tower",e,t,s)}}onLevelEnd(){gameScreen.removeBuff(this.buff)}onLevelStart(e){this.buff=this.createBuff(),e.addBuff(this.buff)}equip(){super.equip(),events.addListener("onLevelEnd",this.onLevelEnd.bind(this)),events.addListener("onLevelStart",this.onLevelStart.bind(this))}}
const buffTags={TIMED:"Timed",STACKS:"Stacks",UNIQUE:"Unique",CHARGES:"Charges",CONCAT_DURATION:"Concat duration",REFRESH_DURATION:"Refresh duration"};class Buff{constructor(i,t,s=()=>{},e=()=>{}){this.name=i,this.effect=(...i)=>{t(this,...i)},this.onApply=(...i)=>{s(this,...i)},this.onRemove=(...i)=>{e(this,...i),this.leave()},this.stacks=1,this.tags=[],this.iconContainer=new PIXI.Container,this.icon=new PIXI.Graphics,this.icon.beginFill(11206570),this.icon.drawRect(0,0,32,32),this.icon.endFill(),this.iconContainer.addChild(this.icon),this.cdArc=new PIXI.Graphics,this.iconContainer.addChild(this.cdArc),this.iconFrame=new PIXI.Graphics,this.iconFrame.lineStyle(4,0,1),this.iconFrame.beginFill(0,0),this.iconFrame.drawRect(0,0,32,32),this.iconFrame.endFill(),this.iconContainer.addChild(this.iconFrame),this.iconText=new PIXI.Text(this.name.charAt(0),{fontFamily:"Arial",fontSize:20,fill:"black",align:"center"}),this.iconText.x=12,this.iconText.y=12,this.iconText.anchor.set(.5),this.iconContainer.addChild(this.iconText),this.stackText=new PIXI.Text("",{fontFamily:"Arial",fontSize:14,fill:"red",align:"center"}),this.stackText.x=30,this.stackText.y=30,this.stackText.anchor.set(1),this.iconContainer.addChild(this.stackText);var n=new PIXI.Graphics,n=(this.iconContainer.addChild(n),n.lineStyle(4,0,1),n.beginFill(11206570),n.drawRect(0,0,32,32),n.endFill(),this.iconContainer.mask=n,this.iconContainer.interactive=!0,this.iconContainer.on("mouseover",this.enter.bind(this)),this.iconContainer.on("mouseout",this.leave.bind(this)),this.iconContainer.on("pointermove",this.move.bind(this)),this.tooltip=new PIXI.Container,new PIXI.Text(i,{fontFamily:"Arial",fontSize:48,fill:"white",stroke:"black",lineJoin:"bevel",strokeThickness:6})),i=(n.x=10,n.y=15,n.anchor.set(0,.5),n.width/n.height),i=(n.width=i<6?30*i:180,n.height=6<i?180/i:30,new PIXI.Graphics);i.beginFill(3178544),i.drawRoundedRect(0,0,n.width+20,30,10),i.endFill(),i.alpha=.8,this.tooltip.addChild(i),this.tooltip.addChild(n)}setDuration(i){this.duration=i,this.baseDuration=i,this.tags.push(buffTags.TIMED)}makeUnique(i){this.uniqueTag=i,this.tags.push(buffTags.UNIQUE)}setStacks(i){this.stacks=i,this.tags.push(buffTags.STACKS)}setCharges(i){this.charges=i,this.tags.push(buffTags.CHARGES)}updateBuffIcon(){this.tags.includes(buffTags.STACKS)&&1<this.stacks&&(this.stackText.text=this.stacks),this.tags.includes(buffTags.CHARGES)&&(this.stackText.text=this.charges),this.tags.includes(buffTags.TIMED)&&(this.cdArc.clear(),this.cdArc.beginFill(8421504,.5),this.cdArc.arc(16,16,64,-Math.PI/2,-Math.PI/2+2*Math.PI*(this.baseDuration-this.duration)/this.baseDuration+.01,!0),this.cdArc.lineTo(16,16),this.cdArc.endFill())}enter(i){i=i.data.global;this.tooltip.x=i.x,this.tooltip.y=i.y,app.stage.addChild(this.tooltip)}leave(){app.stage.removeChild(this.tooltip)}move(i){i=i.data.global;this.tooltip.x=i.x,this.tooltip.y=i.y}}
class EventManager{constructor(){this.eventMap=new Map}addListener(e,t){let n=this.eventMap.get(e);null==n&&(n=[],this.eventMap.set(e,n)),n.push(t)}removeListener(e,t){e=this.eventMap.get(e);null!=e&&-1<(t=e.indexOf(t))&&e.splice(t,1)}invoke(e,...t){e=this.eventMap.get(e);null!=e&&e.forEach(e=>e(...t))}}
class Player{constructor(e,t,a){this.mapSeed=t,this.deckSeed=a,this.playerName=e,this.deckRand=mulberry32(this.deckSeed),this.mapRand=mulberry32(this.mapSeed);function r(e){return(e="0000000"+e).substring(e.length-8)}t=4294967295*this.deckRand(),this.rewardRand=mulberry32(t),a="Map  Seed: "+r(this.mapSeed.toString(16).toUpperCase())+"\nDeck Seed: "+r(this.deckSeed.toString(16).toUpperCase());seedText.appendChild(document.createTextNode(a)),this.maxHP=100,this.hp=this.maxHP,this.maxEnergy=5,this.maxTC=12,this.galaxy=1,this.stage=0,this.money=300,this.deck=this.createDeck(),this.accessories=[],Topbar.CREATE(this.playerName)}heal(e){var t=this.hp;return this.hp=Math.min(this.hp+e,this.maxHP),this.hp-t}createDeck(){var t=["BaseTower","AmmoRefinery","CannonBlast"],a=["BaseTower","MinigunTower","TempestTower"];for(let e=0;e<3;e++){var r=this.deckRand();t.push(a[Math.floor(r*a.length)])}var s=["Adjust","CannonBlast","Overcharge","Refine","BoxOfHollowPoints"];for(let e=0;e<9;e++){var h=this.deckRand();t.push(s[Math.floor(h*s.length)])}return t}getNextMapSeed(){return Math.round(4294967295*this.mapRand())}getNextRewardSeed(){return Math.round(4294967295*this.rewardRand())}}
class Stats{}
class Button extends PIXI.Container{constructor(t,i,s,n,e,h,o=24){super(),this.text=t,this.x=i,this.y=s,this.fn=h,this.isDown=!1,this.isOver=!1,this.standardFill=16777215,this.hoverFill=14474460,this.downFill=13158600,this.rect=new PIXI.Graphics,this.rect.lineStyle(4,0,1),this.rect.beginFill(16777215),this.rect.drawRoundedRect(0,0,n,e,10),this.rect.endFill(),this.rect.tint=this.standardFill,this.addChild(this.rect),this.btnText=new PIXI.Text(t,{fontFamily:"Arial",fontSize:o,fill:"black",align:"center"}),this.btnText.x=n/2,this.btnText.y=e/2,this.btnText.anchor.set(.5),this.addChild(this.btnText),this.rect.interactive=!0,this.rect.buttonMode=!0,this.rect.on("mousedown",this.onButtonDown.bind(this)),this.rect.on("mouseup",this.onButtonUp.bind(this)),this.rect.on("mouseupoutside",this.onButtonUp.bind(this)),this.rect.on("mouseover",this.onButtonOver.bind(this)),this.rect.on("mouseout",this.onButtonOut.bind(this)),this.rect.on("click",this.click.bind(this))}onButtonDown(){this.isDown=!0,this.rect.tint=this.downFill}onButtonUp(){this.isDown=!1,this.isOver?this.rect.tint=this.hoverFill:this.rect.tint=this.standardFill}onButtonOver(){this.isOver=!0,this.isDown||(this.rect.tint=this.hoverFill)}onButtonOut(){this.isOver=!1,this.isDown||(this.rect.tint=this.standardFill)}update(){}click(){this.fn()}enable(){this.rect.interactive=!0,this.rect.tint=this.standardFill}disable(){this.rect.interactive=!1,this.rect.tint=8421504}}
class DeckView extends PIXI.Container{constructor(e,i){super();var t=new PIXI.Graphics,n=new PIXI.Container,r=1500,r=(n.x=(width-r)/2,n.y=(height-950)/2,t.beginFill(2105376,.8),t.drawRoundedRect(0,0,r,950,10),t.endFill(),n.addChild(t),this.titleText=new PIXI.Text("Deck",{fontFamily:"Arial",fontSize:24,fill:"white",stroke:"black",lineJoin:"bevel",strokeThickness:3}),this.titleText.x=30,this.titleText.y=10,n.addChild(this.titleText),this.addChild(n),new Button("Back",1390,890,100,50,e));n.addChild(r);let d=[...player.deck];d.sort();for(let t=0;t<d.length;t++){let e=new Card(Function("return new "+d[t])());e.x=30+t%7*210,e.y=60+(e.cardHeight+30)*Math.floor(t/7),e.removeAllListeners(),e.on("mouseover",()=>this.cardEnter(e)),e.on("mouseout",()=>this.cardLeave(e)),e.on("click",()=>i(d[t])),n.addChild(e)}}cardEnter(e){e.cardFrame.tint=16776960}cardLeave(e){e.cardFrame.tint=0}}
class Topbar extends PIXI.Container{static CREATE(e){Topbar.REMOVE(),topbar=new Topbar(e),Topbar.ADD()}static REMOVE(){null!=topbar&&app.stage.removeChild(topbar)}static ADD(){app.stage.addChild(topbar)}constructor(e){super(),this.bg=new PIXI.Graphics,this.bg.lineStyle(5,0),this.bg.beginFill(3158064);var t=1300;this.x=(width-t)/2;this.bg.drawRoundedRect(0,-20,t,60,20),this.bg.endFill(),this.bg.interactive=!0,this.addChild(this.bg),this.playerName=new PIXI.Text(e,{fontFamily:"Arial",fontSize:20,fill:16777215,stroke:"black",lineJoin:"bevel",strokeThickness:3}),this.playerName.x=10,this.playerName.y=6,this.addChild(this.playerName),this.stageText=new PIXI.Text("",{fontFamily:"Arial",align:"center",fontSize:20,fill:16777215,stroke:"black",lineJoin:"bevel",strokeThickness:3}),this.stageText.x=470,this.stageText.y=6,this.stageText.anchor.set(.5,0),this.addChild(this.stageText),this.waveText=new PIXI.Text("",{fontFamily:"Arial",align:"center",fontSize:20,fill:16777215,stroke:"black",lineJoin:"bevel",strokeThickness:3}),this.waveText.x=850,this.waveText.y=6,this.waveText.anchor.set(.5,0),this.addChild(this.waveText),this.hpIcon=new PIXI.Graphics,this.hpIcon.beginFill(16724016),this.hpIcon.lineStyle(1,0),this.hpIcon.drawRect(0,8,24,8),this.hpIcon.drawRect(8,0,8,24),this.hpIcon.lineStyle(0,0),this.hpIcon.drawRect(7,9,10,6),this.hpIcon.endFill(),this.hpIcon.x=200,this.hpIcon.y=8,this.addChild(this.hpIcon),this.hpText=new PIXI.Text("0 / 0",{fontFamily:"Arial",fontSize:20,fontWeight:"bold",fill:16724016,stroke:"black",lineJoin:"bevel",strokeThickness:3}),this.hpText.x=320,this.hpText.y=6,this.hpText.anchor.set(1,0),this.addChild(this.hpText),this.moneyText=new PIXI.Text("0 G",{fontFamily:"Arial",fontSize:20,fontWeight:"bold",fill:"gold",stroke:"black",lineJoin:"bevel",strokeThickness:3}),this.moneyText.x=120,this.moneyText.y=6,this.moneyText.anchor.set(0,0),this.addChild(this.moneyText),this.gearIcon=new PIXI.Sprite(resources.gearIcon.texture),this.gearIcon.x=1260,this.gearIcon.y=2,this.gearIcon.width=32,this.gearIcon.height=32,this.gearIcon.interactive=!0,this.gearIcon.buttonMode=!0,this.addChild(this.gearIcon),this.deckIcon=new PIXI.Sprite(resources.deckIcon.texture),this.deckIcon.x=1215,this.deckIcon.y=4,this.deckIcon.width=32,this.deckIcon.height=32,this.deckIcon.interactive=!0,this.deckIcon.buttonMode=!0,this.deckIcon.on("click",()=>{setOverlay(new DeckScreen)}),this.addChild(this.deckIcon),this.mapIcon=new PIXI.Sprite(resources.mapIcon.texture),this.mapIcon.x=1170,this.mapIcon.y=2,this.mapIcon.width=32,this.mapIcon.height=32,this.mapIcon.interactive=!0,this.mapIcon.buttonMode=!0,this.addChild(this.mapIcon)}update(){var e,t,i;this.stageText.text=(0==player.stage?"":"Planet "+player.stage+" - ")+"Galaxy "+player.galaxy,this.hpText.text=player.hp+" / "+player.maxHP,this.moneyText.text=player.money+" G",activeScreen==gameScreen?(e=gameScreen.round,t=(i=gameScreen.waves)[e-1],i=i[e],this.waveText.text="Wave "+e+": "+t.length+" "+t[0].constructor.name+" - Wave "+(e+1)+": "+i[0].constructor.name):this.waveText.text=""}}
class UI{constructor(t){this.gs=t,this.bg=new Sprite(PIXI.Texture.WHITE),this.bg.width=width,this.bg.height=275,this.bg.tint=87963,this.bgLine=new PIXI.Graphics,this.bgLine.lineStyle(5,0),this.bgLine.moveTo(0,0),this.bgLine.lineTo(width,0),this.startButton=new Button("Start",width-190,20,150,40,this.gs.startLevel.bind(this.gs)),this.slowButton=new Button(">",width-190,70,70,40,this.clickSlowButton.bind(this)),this.fastButton=new Button(">>>",width-110,70,70,40,this.clickFastButton.bind(this)),this.slowButton.disable(),this.container=new PIXI.Container,this.container.y=height-this.bg.height,this.highlightContainer=new PIXI.Container,this.highlightContainer.y=-height+this.bg.height,this.container.addChild(this.highlightContainer),this.highlightGraphics=new PIXI.Graphics,this.highlightContainer.addChild(this.highlightGraphics),this.container.addChild(this.bg),this.container.addChild(this.bgLine),this.container.addChild(this.startButton),this.container.addChild(this.slowButton),this.container.addChild(this.fastButton),this.handContainer=new PIXI.Container,this.container.addChild(this.handContainer),this.globalBuffInfoContainer=new PIXI.Container,this.globalBuffInfoContainer.x=width-750,this.globalBuffInfoContainer.y=20,this.container.addChild(this.globalBuffInfoContainer),this.buffContainerBG=new PIXI.Graphics,this.buffContainerBG.lineStyle(5,0,1),this.buffContainerBG.beginFill(10526880),this.buffContainerBG.drawRect(0,0,230,250),this.buffContainerBG.drawRect(270,0,230,250),this.buffContainerBG.endFill(),this.globalBuffInfoContainer.addChild(this.buffContainerBG),this.accessoriesText=new PIXI.Text("Accessories",{fontFamily:"Arial",fontSize:24,fill:0}),this.accessoriesText.x=10,this.accessoriesText.y=10,this.globalBuffInfoContainer.addChild(this.accessoriesText),this.globalBuffsText=new PIXI.Text("Global Buffs",{fontFamily:"Arial",fontSize:24,fill:0}),this.globalBuffsText.x=280,this.globalBuffsText.y=10,this.globalBuffInfoContainer.addChild(this.globalBuffsText),this.accessoriesIconContainer=new PIXI.Container,this.accessoriesIconContainer.x=10,this.accessoriesIconContainer.y=50,this.globalBuffInfoContainer.addChild(this.accessoriesIconContainer),this.addAccessoriesIcons(),this.globalBuffIconContainer=new PIXI.Container,this.globalBuffIconContainer.x=280,this.globalBuffIconContainer.y=50,this.globalBuffInfoContainer.addChild(this.globalBuffIconContainer),this.globalBuffIconContainer.on("childAdded",this.sortGlobalBuffs.bind(this)),this.globalBuffIconContainer.on("childRemoved",this.sortGlobalBuffs.bind(this)),this.currentTower=null,this.towerInfoContainer=new PIXI.Container,this.towerInfoContainer.x=width-750,this.towerInfoContainer.y=20,this.towerInfoContainer.visible=!1,this.container.addChild(this.towerInfoContainer),this.towerInfo=new PIXI.Graphics,this.towerInfo.lineStyle(5,0,1),this.towerInfo.beginFill(10526880),this.towerInfo.drawRect(0,0,500,250),this.towerInfo.endFill(),this.towerInfoContainer.addChild(this.towerInfo),this.towerInfoName=new PIXI.Text("Name",{fontFamily:"Arial",fontSize:24,fill:0}),this.towerInfoName.x=10,this.towerInfoName.y=10,this.towerInfoContainer.addChild(this.towerInfoName),this.towerInfoTargets=new PIXI.Text("Targets",{fontFamily:"Arial",fontSize:20,fill:0}),this.towerInfoTargets.x=410,this.towerInfoTargets.y=10,this.towerInfoContainer.addChild(this.towerInfoTargets),this.towerInfoDestroy=new Button("Destroy Tower",240,200,160,40,this.destroyTower.bind(this),16),this.towerInfoContainer.addChild(this.towerInfoDestroy),this.roundText=new PIXI.Text("Round: 0",{fontFamily:"Arial",fontSize:24,fill:16777215,stroke:"black",lineJoin:"bevel",strokeThickness:3}),this.roundText.x=width-190,this.roundText.y=120,this.container.addChild(this.roundText),this.energyText=new PIXI.Text("Energy: 0",{fontFamily:"Arial",fontSize:24,fill:16766720,stroke:"black",lineJoin:"bevel",strokeThickness:3}),this.energyText.x=width-190,this.energyText.y=150,this.container.addChild(this.energyText),this.deckText=new PIXI.Text("Deck: 0",{fontFamily:"Arial",fontSize:24,fill:16777215,stroke:"black",lineJoin:"bevel",strokeThickness:3}),this.deckText.x=width-190,this.deckText.y=180,this.container.addChild(this.deckText),this.discardText=new PIXI.Text("Discard Pile: 0",{fontFamily:"Arial",fontSize:24,fill:16777215,stroke:"black",lineJoin:"bevel",strokeThickness:3}),this.discardText.x=width-190,this.discardText.y=210,this.container.addChild(this.discardText),this.TCText=new PIXI.Text("TC: 0 / 0",{fontFamily:"Arial",fontSize:24,fill:16777215,stroke:"black",lineJoin:"bevel",strokeThickness:3}),this.TCText.x=width-190,this.TCText.y=240,this.container.addChild(this.TCText)}update(){this.gs.hand.forEach(t=>t.update()),this.deckText.text="Deck: "+this.gs.deck.length,this.discardText.text="Discard Pile: "+this.gs.discardPile.length,this.roundText.text="Round: "+this.gs.round,this.energyText.text="Energy: "+this.gs.energy,this.TCText.text=`TC: ${this.gs.currentTC} / `+player.maxTC,this.TCText.tint=this.gs.currentTC>player.maxTC?16711680:16777215,null!=this.currentTower&&(this.towerInfoName.text=this.currentTower.name,this.currentTower.updateStats())}sortGlobalBuffs(){for(let t=0;t<this.gs.globalBuffs.length;t++){var i=this.gs.globalBuffs[t];i.iconContainer.x=t%5*40,i.iconContainer.y=40*Math.floor(t/5)}}addAccessoriesIcons(){for(let t=0;t<player.accessories.length;t++){var i=player.accessories[t];i.x=t%5*40,i.y=40*Math.floor(t/5),i.width=32,i.height=32,this.accessoriesIconContainer.addChild(i)}}clickFastButton(){this.slowButton.enable(),this.fastButton.disable(),speed=2}clickSlowButton(){this.slowButton.disable(),this.fastButton.enable(),speed=1}cardToHand(t){this.handContainer.addChild(t),this.redrawCards()}removeFromHand(t){this.handContainer.removeChild(t),this.redrawCards()}redrawCards(){var i=this.gs.hand,e=Math.min(200,1e3/i.length);for(let t=0;t<i.length;t++)i[t].handIndex=t,i[t].x=20+t*e,i[t].y=20;this.bringCardToFront(this.gs.selectedCard)}bringCardToFront(t){var i=this.gs.hand;for(let t=0;t<i.length;t++)i[t].handIndex=t,i[t]!=this.gs.selectedCard&&(i[t].cardFrame.tint=i[t].isPlayable(this.gs)?65280:0,i[t].y=20);null!=t&&(t.handIndex=-1,t.y=10,this.gs.selectedCard),this.handContainer.children.sort((t,i)=>i.handIndex-t.handIndex)}highlightTargets(t){var i;if(this.highlightGraphics.clear(),this.highlightGraphics.lineStyle(3,65280),t.type==cardType.SPELL)for(i of t.cardObject.getTargets(this.gs.entityContainer.children))this.highlightGraphics.drawCircle(i.x,i.y,i.texture.radius)}clearTargets(){this.highlightGraphics.clear()}showTowerInfo(t){null!=this.currentTower&&(this.currentTower.clicked=!1,this.currentTower.leave(),null!=this.currentTower.buttonContainer&&(this.towerInfoContainer.removeChild(this.currentTower.buttonContainer),this.towerInfoContainer.removeChild(this.towerInfoTargets)),this.towerInfoContainer.removeChild(this.currentTower.buffContainer),this.towerInfoContainer.removeChild(this.currentTower.infoContainer)),null==t?(this.towerInfoContainer.visible=!1,this.globalBuffInfoContainer.visible=!0,this.currentTower=null):(this.currentTower=t,this.currentTower.updateStats(),this.towerInfoContainer.visible=!0,this.globalBuffInfoContainer.visible=!1,null!=this.currentTower.buttonContainer&&(this.towerInfoContainer.addChild(this.currentTower.buttonContainer),this.towerInfoContainer.addChild(this.towerInfoTargets),this.currentTower.buttonContainer.x=410,this.currentTower.buttonContainer.y=50),this.currentTower.buffContainer.x=240,this.currentTower.buffContainer.y=10,this.towerInfoContainer.addChild(this.currentTower.buffContainer),this.currentTower.infoContainer.x=10,this.currentTower.infoContainer.y=50,this.towerInfoContainer.addChild(this.currentTower.infoContainer))}destroyTower(){null!=this.currentTower&&(this.currentTower.remove(),this.showTowerInfo(null))}}
let gameScreen,spaceScreen,activeScreen=null,overlayScreen=null,player,events,topbar=null,collider=new Bump(PIXI),showFrames=!1,frameText,seedText,width=1920,height=1080,deltaTime=0,lastTime=0,speed=1,Application=PIXI.Application,loader=PIXI.Loader.shared,resources=loader.resources,Sprite=PIXI.Sprite,app=new PIXI.Application({width:width,height:height,antialias:!0,resolution:1,backgroundColor:2897209}),scale=(document.body.appendChild(app.view),scaleToWindow(app.renderer.view,"#2C3539")),loadingScreen=(window.addEventListener("resize",function(e){scale=scaleToWindow(app.renderer.view,"#2C3539"),seedText.style.margin=app.view.style.margin,seedText.style.transform=getScaleMatrix()}),document.oncontextmenu=document.body.oncontextmenu=function(e){e.preventDefault()},new LoadingScreen),esc=(setActiveScreen(loadingScreen),loader.add("walker","assets/monster/walker.png").add("snail","assets/monster/snail.png").add("snail2","assets/monster/snail2.png").add("swarmer","assets/monster/swarmer.png").add("centipedeBossHead1","assets/monster/centipedeBossHead1.png").add("centipedeBossHead2","assets/monster/centipedeBossHead2.png").add("centipedeBossPart","assets/monster/centipedeBossPart.png").add("baseTower","assets/tower/baseTower.png").add("minigunTower","assets/tower/minigunTower.png").add("sniperNest","assets/tower/sniperNest.png").add("particle","assets/particles/particle.png").add("grassPlanet","assets/planets/grassPlanet.png").add("spaceMarket","assets/planets/spaceMarket.png").add("wastePlanet","assets/planets/wastePlanet.png").add("crystalPlanet","assets/planets/crystalPlanet.png").add("gasPlanet","assets/planets/gasPlanet.png").add("bossPlanet","assets/planets/bossPlanet.png").add("unknownPlanet","assets/planets/unknownPlanet.png").add("mapIcon","assets/icons/mapIcon.png").add("deckIcon","assets/icons/deckIcon.png").add("gearIcon","assets/icons/gearIcon.png").add("heartIcon","assets/icons/heart.png").add("spaceShip","assets/spaceShip.png"),loader.onProgress.add(loadingScreen.progress.bind(loadingScreen)),loader.load(setup),keyboard("Escape"));function setup(){(seedText=document.getElementById("seedText")).style.left="0",seedText.style.top="0",seedText.style.margin=app.view.style.margin,seedText.style.transformOrigin="0 0",seedText.style.transform=getScaleMatrix(),setActiveScreen(new MenuScreen),requestAnimationFrame(update)}function showFPS(){showFrames=!0,(frameText=new PIXI.Text("",{fontFamily:"Arial",fontSize:32,fill:"white",align:"center",stroke:"black",lineJoin:"bevel",strokeThickness:2})).x=width-10,frameText.y=10,frameText.anchor.set(1,0),app.stage.addChild(frameText)}function setActiveScreen(e){null!=activeScreen&&app.stage.removeChild(activeScreen.container),activeScreen=e,app.stage.addChildAt(activeScreen.container,0)}function setOverlay(e){null!=overlayScreen&&app.stage.removeChild(overlayScreen.container),null!=(overlayScreen=e)?(app.stage.addChildAt(overlayScreen.container,1),activeScreen.container.interactiveChildren=!1):activeScreen.container.interactiveChildren=!0}function update(e){deltaTime=speed*((e-lastTime)%100),lastTime=e,(null!=overlayScreen?overlayScreen:activeScreen).update(),null!=topbar&&topbar.update(),showFrames&&(frameText.text="FPS: "+Math.floor(1e3/deltaTime)),requestAnimationFrame(update)}function shuffle(e,n){for(var t,a,s=e.length-1;0<s;s--)t=Math.floor((null!=n?n():Math.random())*(s+1)),a=e[s],e[s]=e[t],e[t]=a;return e}function sqr(e){return e*e}function dist2(e,n){return sqr(e.x-n.x)+sqr(e.y-n.y)}function distToSegmentSquared(e,n,t){var a=dist2(n,t);return 0==a?dist2(e,n):(a=((e.x-n.x)*(t.x-n.x)+(e.y-n.y)*(t.y-n.y))/a,a=Math.max(0,Math.min(1,a)),dist2(e,{x:n.x+a*(t.x-n.x),y:n.y+a*(t.y-n.y)}))}function distToSegment(e,n,t){return Math.sqrt(distToSegmentSquared(e,n,t))}function keyboard(e){let n={};n.value=e,n.isDown=!1,n.isUp=!0,n.press=void 0,n.release=void 0,n.downHandler=e=>{e.key===n.value&&(n.isUp&&n.press&&n.press(),n.isDown=!0,n.isUp=!1,e.preventDefault())},n.upHandler=e=>{e.key===n.value&&(n.isDown&&n.release&&n.release(),n.isDown=!1,n.isUp=!0,e.preventDefault())};const t=n.downHandler.bind(n),a=n.upHandler.bind(n);return window.addEventListener("keydown",t,!1),window.addEventListener("keyup",a,!1),n.unsubscribe=()=>{window.removeEventListener("keydown",t),window.removeEventListener("keyup",a)},n}function pixiMatrixToCSS(e){return"matrix("+[e.a,e.b,e.c,e.d,e.tx,e.ty].join(",")+")"}function getScaleMatrix(){var e=app.stage.worldTransform.clone(),n=app.renderer.view.getBoundingClientRect();return e.scale(n.width/app.renderer.width,n.height/app.renderer.height),pixiMatrixToCSS(e)}esc.press=()=>{activeScreen.keyPress&&activeScreen.keyPress("Escape")};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
